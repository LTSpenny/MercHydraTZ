################################################
######       MAINTENANCE MACROS           ######
################################################
# Usage:
#       Drop in appropriate category, any macros that help with maintenance!
#                  Sections                    #
#1.- Bot
#2.- Positions
#3.- Input Shaper Calibration
#4.- Belt Shaper Calibration
#5.- Pressure Advance Calibration and Tune *REMOVING*
#6.- Pressure Advance Variables *REMOVING*
#7.- Sensor Query
#8.- Park Macros
#9.- Level Bed Screws (Corners)
##################################
#  1.- BOT
##################################

[gcode_macro _bot_data]
variable_lapse_video_size: 0
variable_lapse_filename: 'None'
variable_lapse_path: 'None'
gcode:
    M118 Setting bot lapse variables

##################################
#  2.- Positions
##################################

[gcode_macro FAKE_POSITION]
description: set fake position
gcode:
        SET_KINEMATIC_POSITION X=10 Y=10 Z=5

[gcode_macro TEST_MOVEMENT_NOISE]
gcode:
    SAVE_GCODE_STATE NAME=TEST_MOVEMENT_NOISE
    G91
    {% set speeds = range(20, 100, 10) %} # speed in mm/s
    {% set distance = 100 %}
    G91

    {% for speed in speeds %}
        { action_respond_info("Testing speed %smm/s" % (speed)) }
        G1 X{distance} F{speed * 60}
        G1 X-{distance} F{speed * 60}
        G1 Y{distance} F{speed * 60}
        G1 Y-{distance} F{speed * 60}
        G1 X{distance} Y{distance} F{speed * 60}
        G1 X-{distance} Y-{distance} F{speed * 60}
    {% endfor %}

    RESTORE_GCODE_STATE NAME=TEST_MOVEMENT_NOISE

[gcode_macro GET_PROBE_LIMITS]
description: Calculates the probe min/max/current coordinates
gcode: 
    {% set config = printer.configfile.config %}
    # Find probe config in configfile
    {% if config["bltouch"] %}
        # bltouch section found
        {% set probe = config["bltouch"] %}
        {% set has_probe = True %}
    {% elif config["probe"] %}
        # probe section found
        {% set probe = config["probe"] %}
        {% set has_probe = True %}
    {% else %}
        # No probe or bltouch sections found
        RESPOND MSG="Failed to detect probe in configfile"
    {% endif %}
    {% if has_probe %}
        {% set stepperx = config["stepper_x"] %}
        {% set steppery = config["stepper_y"] %}
        {% set xprobemin = stepperx["position_min"]|float + probe["x_offset"]|float %} 
        {% set xprobemax = stepperx["position_max"]|float + probe["x_offset"]|float %} 
        {% set yprobemin = steppery["position_min"]|float + probe["y_offset"]|float %} 
        {% set yprobemax = steppery["position_max"]|float + probe["y_offset"]|float %}
        RESPOND MSG="Configured Probe X-Offset {probe.x_offset}"
        RESPOND MSG="Configured Probe Y-Offset {probe.y_offset}"
        RESPOND MSG="Configured Probe Z-Offset {probe.z_offset}"
        RESPOND MSG="Minimum PROBE position X={xprobemin} Y={yprobemin}" 
        RESPOND MSG="Maximum PROBE position X={xprobemax} Y={yprobemax}"
        # check if printer homed
        {% if "xyz" in printer.toolhead.homed_axes %} 
            {% set curprobex = printer.toolhead.position.x|float + probe["x_offset"]|float %} 
            {% set curprobey = printer.toolhead.position.y|float + probe["y_offset"]|float %} 
            RESPOND MSG="Current PROBE position X={curprobex} Y={curprobey}"
        {% endif %}
    {% endif %}

################################################
###### STANDARD INPUT_SHAPER CALIBRATIONS ######
################################################

# Usage:
#   1. Call the AXES_SHAPER_CALIBRATION macro, wait for it to end and compute the graphs. Then look for the results in the results folder.
#   2. Call the BELTS_SHAPER_CALIBRATION macro, wait for it to end and compute the graphs. Then look for the results in the results folder.
#   3. If you find out some strange noise, you can use the EXCITATE_AXIS_AT_FREQ macro to diagnose the origin
##################################
# 3.- Input Shaper Calibration
##################################

[gcode_macro AXES_SHAPER_CALIBRATION]
description: Run standard input shaper test for all axes
gcode:
    {% set verbose = params.VERBOSE|default(true) %}
    CG28
    STATUS_BUSY
    TEST_RESONANCES AXIS=X
    M400
    STATUS_BUSY
    TEST_RESONANCES AXIS=Y
    M400

    {% if verbose %}
        RESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."
    {% endif %}
    RUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER
    STATUS_READY
##################################
# 4.- Belt Shaper Calibration
##################################

[gcode_macro BELTS_SHAPER_CALIBRATION]
description: Run custom demi-axe test to analyze belts on CoreXY printers
gcode:
    {% set verbose = params.VERBOSE|default(true) %}
    
    TEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b
    M400
    TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a
    M400

    {% if verbose %}
        RESPOND MSG="Graphs generation... Please wait a minute or two and look in the configured folder."
    {% endif %}
    RUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELTS

[gcode_macro EXCITATE_AXIS_AT_FREQ]
description: Maintain a specified input shaper excitating frequency for some time to diagnose vibrations
gcode:
    {% set FREQUENCY = params.FREQUENCY|default(25)|int %}
    {% set TIME = params.TIME|default(10)|int %}
    {% set AXIS = params.AXIS|default("x")|string|lower %}

    TEST_RESONANCES OUTPUT=raw_data AXIS={AXIS} FREQ_START={FREQUENCY-1} FREQ_END={FREQUENCY+1} HZ_PER_SEC={1/(TIME/3)}
    M400

###########################
# 5.-Pressure Advance Macro
###########################

[gcode_macro M900]
description: Manualy Set Presure Advance
gcode:
    {% if 'K' in params %}
        {% if 'E' in params %}
        SET_PRESSURE_ADVANCE EXTRUDER={params.E} ADVANCE={params.K}
        {% else %}
        SET_PRESSURE_ADVANCE ADVANCE={params.K}
        {% endif %}
    {% endif %}

##########################
# 6.- Sensor Query
##########################

[gcode_macro list_sensors]
gcode:
  { action_respond_info(printer.heaters.available_heaters | join(', ')) }
  { action_respond_info(printer.heaters.available_sensors | join(', ')) }

##########################
# 7.- Park Macros
##########################

# Park front center
[gcode_macro PARKFRONT]
description: Park Print Head at front of printer. Z is 200mm
gcode:
   # MAINTENANCE_STATUS
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                               ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000        
    RESTORE_GCODE_STATE NAME=PARKFRONT

# Park front center, but low down.
[gcode_macro PARKFRONTLOW]
description: Park in the Front Z is close to nozzle.
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                              ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000                                     
    RESTORE_GCODE_STATE NAME=PARKFRONT

# Park top rear left
[gcode_macro PARKREAR]
description: Park 50mm above Rear left of bed. 
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKREAR
    G90                              ; absolute positioning
    G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000     
    RESTORE_GCODE_STATE NAME=PARKREAR

[gcode_macro PARKCENTER]
description: Park Center of bed.
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
       G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKCENTER
    G90                               ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000    
    RESTORE_GCODE_STATE NAME=PARKCENTER

# Park 15mm above center of bed
[gcode_macro PARKBED]
description: Park 15mm above center of bed.
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKBED
    G90                                ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000                                     
    RESTORE_GCODE_STATE NAME=PARKBED

[gcode_macro MAINTENANCE]
#
# MAINTENANCE
#
# Move the toolhead to 1/2 max above the bed and the front centre
#
description: move the toolhead to a convenient position for working on it, Z is 50
gcode:

    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    {% set mid_x = max_x / 2.0 %}
    {% set z50 = max_z * 0.5 %}

    STATUS_BUSY
    HOME_IF_NEEDED
    G0 X{mid_x} Y0 Z{z50} F3000
    STATUS_READY

[gcode_macro G27] # Park Toolhead
gcode:
    {% set default_x = printer.toolhead.axis_minimum.x + 10 %}
    {% set default_y = printer.toolhead.axis_maximum.y %}

    {% if 'save_variables' in printer %}
        {% set svv = printer.save_variables.variables %}
        {% if 'park_x' in svv %}
        {% set default_x = svv.park_x %}
        {% endif %}
        {% if 'park_y' in svv %}
        {% set default_y = svv.park_y %}
        {% endif %}
    {% endif %}

    {% set x = params.X|default(default_x)|float %}
    {% set y = params.Y|default(default_y)|float %}
    {% set z = params.Z|default(20)|float %}

    {% if printer.toolhead.homed_axes != "xyz" %}
        {action_respond_info("Please home XYZ first")}
    {% else %}
        SAVE_GCODE_STATE NAME=G27_state
        G91
        G1 Z{z}
        G90
        G1 X{x} Y{y} F3000
        RESTORE_GCODE_STATE NAME=G27_state MOVE=0
    {% endif %}

[gcode_macro PAUSE_PARK]
gcode:
    {% set default_x = printer.toolhead.axis_minimum.x + 5 %}
    {% set default_y = printer.toolhead.axis_maximum.y %}

    {% if 'save_variables' in printer %}
        {% set svv = printer.save_variables.variables %}
        {% if 'park_x' in svv %}
        {% set default_x = svv.park_x %}
        {% endif %}
        {% if 'park_y' in svv %}
        {% set default_y = svv.park_y %}
        {% endif %}
    {% endif %}

    {% set x = params.X|default(default_x)|float %}
    {% set y = params.Y|default(default_y)|float %}
    {% set z = params.Z|default(20)|float %}
    {% set r = params.R|default(3)|float %}

    {% if printer.pause_resume.is_paused %}
        {action_respond_info("Already paused")}
    {% elif printer.toolhead.homed_axes != "xyz" %}
        {action_respond_info("Please home XYZ first")}
    {% else %}
        PAUSE
        {% if r > 0.0 %}
        RETRACT D={r}
        {% endif %}
        G27 X{x} Y{y} Z{z}
    {% endif %}
##############################################################
# 8.- Level Bed Screws
##############################################################

[gcode_macro LEVEL_BED_SCREWS]
description: Tram to all Corners for Level Adjustment
gcode:
    _CG28
    BED_SCREWS_ADJUST
##############################################################
# 9.- Misc Macros
##############################################################
[gcode_macro COMPARE_VALUES]
description: Compare two values
gcode:
    {% set VALUE_A = params.A|default(0)|float %}
    {% set VALUE_B = params.B|default(0)|float %}

    {% if VALUE_A < (VALUE_B - 3) or VALUE_A > (VALUE_B + 3) %}
        M118 False
    {% else %}
        M118 True
    {% endif %}

##############################################################
# 9.- Print Z-Test Patern
##############################################################

