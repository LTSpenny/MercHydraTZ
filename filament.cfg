##########################################
# Toolhead and Other Variables
##########################################

[firmware_retraction]
retract_length: 0.4 ; length of filament (in mm) at G10/G11
unretract_extra_length: 0 ; length of additional filament (in mm) at G11
retract_speed: 50
unretract_speed: 50

##########################################
# Filament Sensor
##########################################

#Smart Filament Sensor Connected to STOP3
[filament_motion_sensor smart_filament_sensor]
detection_length: 10
extruder: extruder
switch_pin: ^PG11
pause_on_runout: True
insert_gcode:
    FILAMENT_LOAD
    M117 Insert Detected
runout_gcode:
    M117 Runout Detected
    FILAMENT_UNLOAD
    
    #LCDRGB R=1 G=0 B=0  # Turn LCD red
    #BEEP I=12

[delayed_gcode DISABLEFILAMENTSENSOR] ; This will disable the SFS 1 second after klipper starts
initial_duration: 1
gcode:
    SET_FILAMENT_SENSOR SENSOR=smart_filament_sensor ENABLE=0 ; Put your filament sensor's name after SENSOR=

[gcode_macro SFS_ENABLE] ; Add this to PRINT_START
description: Enable smart filament sensor
gcode:
    M117 ENABLING the Smart Filament Sensor
    G92 E0
    SET_FILAMENT_SENSOR SENSOR=smart_filament_sensor ENABLE=1 ; Put your filament sensor's name after SENSOR=

[gcode_macro SFS_DISABLE] ; Add this to PRINT_END and PRINT_CANCEL
description: Disable smart filament sensor 
gcode:
    M117 DISABLING the Smart Filament Sensor
    G92 E0
    SET_FILAMENT_SENSOR SENSOR=smart_filament_sensor ENABLE=0 ; Put your filament sensor's name after SENSOR=

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

##########################################
# Filament Load/Unload
##########################################

[gcode_macro FILAMENT_LOAD]
description: Load filament and disable rounout while running
gcode:
  {% set user   = printer['gcode_macro _USER_VARIABLE'] %}
  {% set pos    = printer['gcode_macro _USER_VARIABLE'].purge.purge %}
  {% set move_z = [user.z_hop,printer.toolhead.position.z]|max %} ; calc movement high
  {% if printer.idle_timeout.state != "Printing" or printer.pause_resume.is_paused|lower == "true" %}
    {% if user.hw.runout.type == 'motion' %} SET_FILAMENT_SENSOR smart_filament_sensor=runout ENABLE=0 {% endif %} ;rename sensor to your config sensor
    _CG28                                     ; home if not already homed
    G90                                       ; absolute positioning
    G1 Z{move_z} F{user.speed.z_hop}          ; move head to minimum
    G1 X{pos.x} Y{pos.y} F{user.speed.travel} ; move to purge bucket location 
    {% if user.hw.display.ena %} _LCD_KNOB COLOR=BLUE {% endif %}
    {% if not printer.extruder.can_extrude %}
      {action_respond_info("Extruder Temp to low heat to %3.1f°C" % printer.configfile.settings.extruder.min_extrude_temp)}
      M109 S{printer.configfile.settings.extruder.min_extrude_temp}
    {% endif %}
    {% if user.hw.display.ena %} _LCD_KNOB {% endif %}
    G1 Z{pos.z} F{user.speed.z_hop} 
    M83                                                   ; set extruder to relative
    G1 E{user.filament.load_distance} F{user.speed.load}  ; quickly load filament
    {% if user.hw.runout.type == 'motion' %}
      _PRINT_AR T="RUNOUT Motion Sensor Enable: true"
      SET_FILAMENT_SENSOR sfs_sensor=runout ENABLE=1 ; rename sensor to your config sensor
    {% endif %}
    G1 E{user.filament.load_extrude} F{user.speed.retract} ; slower load filament
    G1 E-{user.filament.retract.pause}
    _WIPE ; clean nozzle
    G1 Z{move_z} F{user.speed.z_hop}        
    G1 X{pos.x} Y{pos.y} F{user.speed.travel} ; move to purge bucket location
    M109 S{printer.extruder.target}           ; restore old extruder temperature
    _PRINT_AR T="Filament loaded"
    SAVE_VARIABLE VARIABLE=filament_loaded VALUE=True
    {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %} ; set it back to relativ
    {% if printer.gcode_move.absolute_extrude %}         M82 {% endif %} ; set it back to absolute
  {% else %}
    _PRINT_AR T="Filament loading disabled while printing!"
  {% endif %}

[gcode_macro FILAMENT_UNLOAD]
description: Unload filament and disable rounout while running
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  {% if printer.idle_timeout.state != "Printing" or printer.pause_resume.is_paused|lower == "true" %}
    {% if user.hw.runout.type == 'motion' %}
      _PRINT_AR T="RUNOUT Motion Sensor Enable: false"
      SET_FILAMENT_SENSOR sfs_sensor=runout ENABLE=0 ; rename sensor to your config sensor
    {% endif %}
    {% if user.hw.display.ena %} _LCD_KNOB COLOR=BLUE {% endif %}
    {% if not printer.extruder.can_extrude %}
      {action_respond_info("Extruder Temp to low heat to %3.1f°C" % printer.configfile.settings.extruder.min_extrude_temp)}
      M109 S{printer.configfile.settings.extruder.min_extrude_temp}
    {% endif %}
    {% if user.hw.display.ena %} _LCD_KNOB {% endif %}
    _FILAMENT_BALL WAIT=3 ; ball up the filament tip and retract out past the extruder gears
    G1 E-{user.filament.unload_distance} F{user.speed.load}
    M109 S{printer.extruder.target} ; restore old extruder temperature
    _PRINT_AR T="Filament unloaded"
    SAVE_VARIABLE VARIABLE=filament_loaded VALUE=False
    {% if printer.gcode_move.absolute_extrude %} M82 {% endif %} ; set it back to absolute
  {% else %}
    _PRINT_AR T="Filament unloading disabled while printing!"
  {% endif %}


###########################################
# Nozzle Clean Rutine
###########################################

#[gcode_macro NOZZLECLEAN]
#description: Move to bucket and purge and scrub nozzle
#gcode:
#  {% set user   = printer['gcode_macro _USER_VARIABLE'] %}
#  {% set pos    = user.purge.purge %}
#  {% set move_z = [user.z_hop,printer.toolhead.position.z]|max %} ; calc movement high
#  SET_GCODE_OFFSET Z=0.0
#  _PRINT_AR T="Clean Nozzle" SHOW_LCD=true
#  _CG28                                     ; home if not already homed
#  G90                                       ; absolute positioning
#  G1 Z{move_z} F{user.speed.z_hop}          ; move head up
#  G1 X{pos.x} Y{pos.y} F{user.speed.travel} ; move to purge bucket location
#  G1 Z{pos.z} F{user.speed.z_hop}           ; lower Z
#  {% if not printer.extruder.can_extrude %}
#      {action_respond_info("Extruder Temp to low heat to %3.1f°C" % printer.configfile.settings.extruder.min_extrude_temp)}
#      M109 S{printer.configfile.settings.extruder.min_extrude_temp}
#  {% endif %}
#  G92 E0                               ; reset Extruder
#  M83                                  ; relative extrusion
#  G1 E2 F500                           ; purge filament
#  G1 E2 F800                           ; purge filament
#  G1 E-1 F800                          ; retract filament
#  G4 P500
#  _WIPE
#  M109 S{printer.extruder.target} ; restore old extruder temperature
#  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
#  {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %} ; set it back to relative
#  {% if printer.gcode_move.absolute_extrude %}         M82 {% endif %} ; set it back to absolute
#  SET_GCODE_OFFSET Z={printer.gcode_move.homing_origin.z} MOVE=1

#[gcode_macro _WIPE]
#description: Helper: Wipe nozzle at bucket
#gcode: 
#  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
#  {% set wipe     = user.purge.wipe %}
#  G90 ; absolute positioning
#  G0 X{wipe.start.x} Y{wipe.start.y} Z{wipe.start.z} F{user.speed.wipe}
#  {% for moves in range(0, wipe.cnt) %} ; move head diagonal to brush
#    {% for coordinate in [wipe.start.x, wipe.end.x] %}
#      G0 X{coordinate} Y{wipe.start.y + wipe.offset * moves}
#    {% endfor %}
#  {% endfor %}
#  G0 X{wipe.end.x} Y{wipe.end.y} Z{wipe.end.z}


# Prime Line handled by KAMP mesh - for back up use if KAMP does not work out
#[gcode_macro PRIME_LINE]
#description: Purge nozzle at defined position
#gcode:
#  {% set user     = printer['gcode_macro _USER_VARIABLE'] %}
#  {% set prime        = user.prime %}
#  {% set prime_height = params.PRIME_HEIGHT|default(prime.pos.z) %}     ; get parameter or set default
#  {% set move_z       = [user.z_hop,printer.toolhead.position.z]|max %} ; calc movement high
#  {% if prime.dir|string == 'X+' %}
#    {% set first_line   = 'X%s E%s F%s'  % (prime.length_per_seg, prime.extrude_per_seg, user.speed.prime) %}
#    {% set second_line  = 'X-%s E%s F%s' % (prime.length_per_seg, prime.extrude_per_seg, user.speed.prime) %}
#    {% set move_to_side = 'Y%s' % prime.spacing %}
#  {% elif prime.dir|string == 'X-' %}
#    {% set first_line   = 'X-%s E%s F%s' % (prime.length_per_seg, prime.extrude_per_seg, user.speed.prime) %}
#    {% set second_line  = 'X%s E%s F%s'  % (prime.length_per_seg, prime.extrude_per_seg, user.speed.prime) %}
#    {% set move_to_side = 'Y%s' % prime.spacing %}
#  {% elif prime.dir|string == 'Y+' %}
#    {% set first_line   = 'Y%s E%s F%s'  % (prime.length_per_seg, prime.extrude_per_seg, user.speed.prime) %}
#    {% set second_line  = 'Y-%s E%s F%s' % (prime.length_per_seg, prime.extrude_per_seg, user.speed.prime) %}
#    {% set move_to_side = 'X%s' % prime.spacing %}
#  {% elif prime.dir|string == 'Y-' %}
#    {% set first_line   = 'Y-%s E%s F%s' % (prime.length_per_seg, prime.extrude_per_seg, user.speed.prime) %}
#    {% set second_line  = 'Y%s E%s F%s'  % (prime.length_per_seg, prime.extrude_per_seg, user.speed.prime) %}
#    {% set move_to_side = 'X%s' % prime.spacing %}
#  {% else %}
#    {action_raise_error("_USER_VARIABLE.prime.dir is not spezified as X+, X-, Y+ or Y-")}
#  {% endif %} 
#  _PRINT_AR T="Prime Line" SHOW_LCD=true
#  _CG28                                                 ; home if not already homed
#  G92 E0                                                ; reset Extruder
#  G90                                                   ; absolute positioning
#  G1 Z{move_z} F{user.speed.z_hop}                      ; move head up
#  G1 X{prime.pos.x} Y{prime.pos.y} F{user.speed.travel} ; move to start position
#  G1 Z{prime_height} F{user.speed.z_hop}                ; move Z Axis down
#  G91                                                   ; relative positioning
#  {% for segment in range(prime.seg|int) %}             ; draw the first line
#    G1 {first_line}
#  {% endfor %}    
#  G1 {move_to_side}                                     ; move to side
#  {% for segment in range(prime.seg|int) %}             ; draw the second line
#    G1 {second_line}
#  {% endfor %}
#  G92 E0                                                ; reset Extruder
#  {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %} ; set it back to relative
#  {% if printer.gcode_move.absolute_extrude %}         M82 {% endif %} ; set it back to absolute
#  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1


########################################
# Print Status Changes
########################################

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  PAUSE_BASE
  _TOOLHEAD_PARK_PAUSE_CANCEL

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read extrude from  _TOOLHEAD_PARK_PAUSE_CANCEL  macro #####
  {% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
  ## Move head and retract only if not already in the pause state and park set to true
  {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
    _TOOLHEAD_PARK_PAUSE_CANCEL
  {% endif %}
  SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
  CLEAR_PAUSE
  SDCARD_RESET_FILE
  PRINT_END
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE
  SET_FILAMENT_SENSOR SENSOR=sfs_sensor ENABLE=0

[gcode_macro CANCEL_CURRENT]
description: Cancel the actual running print
variable_park: True
gcode:
  CANCEL_PRINT {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_park_delta = 2.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}



########################################
# G Codes
########################################

[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}

[gcode_macro M190]
rename_existing: M99190
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   ; Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}  ; Wait for bed temp (within 1 degree)
    {% endif %}


#####################################################################
# 	Macros
#####################################################################

[gcode_macro _FILAMENT_BALL]
description: Helper: Round the filament tip
gcode:
  G92 E0   ; zero the extruder
  M83      ; relative extrusion
  G1 E2 F{printer['gcode_macro _USER_VARIABLE'].speed.retract * 2}
  G1 E-2
  G1 E4
  G1 E-4
  G1 E8
  G1 E-8
  G1 E-25
  G4 P{params.WAIT|default(0)|int * 1000}


