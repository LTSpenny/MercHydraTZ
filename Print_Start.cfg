#[gcode_macro START_PRINT]
#gcode:
     
    # Parameters
#    {% set bed_temp = params.BED_TEMP|int %}
#    {% set extruder_temp = params.EXTRUDER_TEMP|int %}
   # {% set chamber_temp = params.CHAMBER|default(0)|int %}
#  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
#  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
#    _CG28
    # Use absolute coordinates
#    G90
#    M83
#    M117 Heating..
#    M140 S{bed_temp}               ; Start bed heating
#    M190 S{bed_temp}               ; Wait for bed to reach temperature
    #M109 S120
#    _Z_TILT_MAYBE
    # Reset the G-Code Z offset (adjust Z offset if needed)
#    SET_GCODE_OFFSET Z=0.0
    # Home the printer
   # BED_MESH_CALIBRATE
    # Move the nozzle near the bed
  #  G1 Z5 F3000
    # Move the nozzle very close to the bed
  #  G1 Z0.15 F300
    # Set and wait for nozzle to reach temperature
#    M109 S{extruder_temp}
#    VORON_PURGE
#    G90
#    M117 Starting Print .......
#    STATUS_PRINTING

##############################################################
# Start and End Macros
##############################################################


[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
  # {% set chamber_temp = params.CHAMBER|default(0)|int %}
    # Start bed heating (but don't wait for it)
    M140 S{BED_TEMP}
    # Use absolute coordinates
    G90
    # Reset the G-Code Z offset (adjust Z offset if needed)
    SET_GCODE_OFFSET Z=0.0
    # Home the printer
    CG28
    # Wait for bed to reach temperature
    M190 S{BED_TEMP}
    _Z_TILT_MAYBE
    # Reset the G-Code Z offset (adjust Z offset if needed)
    SET_GCODE_OFFSET Z=0.0
    BED_MESH_CALIBRATE
    # Move the nozzle near the bed
    G1 Z5 F3000
    # Move the nozzle very close to the bed
    G1 Z0.15 F300
    # Set and wait for nozzle to reach temperature
    M109 S{EXTRUDER_TEMP}
    VORON_PURGE
    G90
    M117 Starting Print .......
    STATUS_PRINTING

[gcode_macro END_PRINT]
gcode:
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    # Move nozzle away from print while retracting
    G91
    G1 X-350 Y-350 E-3 F300
    # Raise nozzle by 10mm
    G1 Z10 F3000
    G90
    # Disable steppers
    M84

###########################################################
# Heat Soak Macros
###########################################################

[gcode_macro HEAT_SOAK]
description: heats the bed for a while

variable_target_temp: 0
variable_stage: None ## heating -> soaking -> done -> None

## in seconds
variable_check_interval: 10
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0

gcode:
    {% set printcfg = printer["gcode_macro _printcfg"] %}    {% set TARGET = params.TARGET | default(110) | float %}
    {% set DURATION = (params.DURATION | default(10) | int) * 60 %} ## minutes to seconds

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE={ TARGET }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    ;; fire up the heater
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ TARGET }

    ;; Do the lights
    STATUS_SOAKING


    ;; run the fans to circulate air
    #_FAN_SOAK

    ;; put the bed and nozzle where they're a safe distance apart
    HOME_IF_NEEDED
    PARKBED_MID

    M84 ;; turn off steppers

    ;; Do the lights (again)
    STATUS_SOAKING
    M{printcfg.output|int}  Soaking...

    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ check_interval }

[gcode_macro CANCEL_HEAT_SOAK]
description: cancels an in-progress HEAT_SOAK cycle
gcode:
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=1

[delayed_gcode heat_soaker]
; ## debug
; { action_respond_info( printer['gcode_macro HEAT_SOAK'] | tojson )}
gcode:
    {% set printcfg = printer["gcode_macro _printcfg"] %}    {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}

    ## update total time elapsed
    {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

    {% set stage = heat_soak.stage %}
    {% if stage == "heating" and printer.heater_bed.temperature >= heat_soak.target_temp %}
        {% set stage = "soaking" %}
    {% endif %}

    {% if stage == "soaking" %}
        ## update soak countdown
        {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }

        {% if soak_time_remaining == 0 %}
            {% set stage = "done" %}
        {% endif %}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"

    {% if stage in ("done", "cancel") %}
        STATUS_READY
        _FAN_SOAK_OFF
        {% if stage == "cancel" %}
            {% set stage = "done" %}
            TURN_OFF_HEATERS
            M107 ; turn off fan
            M{printcfg.output|int}  { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }
            game_over_tune
        {% else %}
            M{printcfg.output|int}  { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }
            zelda_end_tune
        {% endif %}

        ## reset all state vars, except stage, which may be queried via the api
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    {% else %}
        {% set BED_TARGET = printer.heater_bed.target|float %}
        {% set BED_TEMP = printer.heater_bed.temperature|float %}
        {% set BED_PROGRESS = (BED_TEMP / BED_TARGET) * 255 %}
        WLED_CONTROL INTENSITY={BED_PROGRESS}
        {% if total_time_elapsed % 90 == 0 %}
            ## output status periodically
            {% if stage == "heating" %}
                M{printcfg.output|int}  { "heating -- %.1fm elapsed" | format(total_time_elapsed / 60.0) }
            {% elif stage == "soaking" %}
                M{printcfg.output|int}  { "soaking -- %.1fm remaining" | format(soak_time_remaining / 60.0) }
            {% endif %}
        {% endif %}

        ## trigger ourselves again
        UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ heat_soak.check_interval }

        ## dwell for 1ms to prevent from going idle
        G4 P1

    {% endif %}

[gcode_macro _FAN_SOAK]
gcode:
    #NEVERMORE_LOW
    BED_FAN_ON
    #PI_FAN_ON
    #SYSTEM_FAN_ON

[gcode_macro _FAN_SOAK_OFF]
gcode:
    NEVERMORE_OFF
    BED_FAN_OFF






###########################################################
# MISC G29
###########################################################
[gcode_macro G29]
gcode:
    {% set t = params.T|default(0)|float %}

    {% if printer.idle_timeout.state == "Printing" %}
        {action_respond_info("This command cannot be used while printing")}
    {% elif printer.toolhead.homed_axes != "xyz" %}
        {action_respond_info("Please home XYZ first")}
    {% else %}
        SAVE_GCODE_STATE NAME=G29_state
        G90
        G1 Z10 F240
        {% if t > 30.0 %}
        #M190 S{t}
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={t}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={t} MAXIMUM={t+1}
        {% endif %}
        M117 Calibrating Mesh
        BED_MESH_CALIBRATE
        {% if 'S' in params %}
        #M140 S{params.S}
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={params.S+1}
        {% endif %}
        G90
        G1 Z10 F240
        G1 X150 Y155 F6000
        RESTORE_GCODE_STATE NAME=G29_state MOVE=0
    {% endif %}


[gcode_macro MESH_CHECK]
description: Checks if a mesh exists to determine whether to create a new one
gcode:
    {% if printer.bed_mesh.profiles['default'] is defined %}
        BED_MESH_PROFILE LOAD='default' ; load mesh
    {% else %}
        BED_MESH_CALIBRATE ; generate new mesh
    {% endif %}

