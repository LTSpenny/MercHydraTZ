#####################################################################
#  Preperation 
#####################################################################
# copy this file in the same directory as your printer.cfg
# add 
#    [include pressure_advance.cfg]
# to your printer.cfg
#
# A [save_variables] block is needed since a printer save variable needs to be used to have it available after power up.
# You can skip this if you already have an [save_variables] config block
# e.g: 
#    [save_variables]
#    filename: /home/pi/klipper_config/.variables.stb
# I like to hide that file as there is nothing in that should be modified by the user.
# Do a klipper restart after adding the stuff above
#
# After klipper is back you need define your first filament id e.g.
#   PRESSURE_ADVANCE_ADD FILAMENT=ABS
#
#####################################################################
#  Macro for the print start or filament gcode section of your slicer 
#####################################################################
# PRESSURE_ADVANCE_SELECT [FILAMENT=<id>] [NOZZLE=<value>] : Set pressure advanve and smooth 
# time for the different filaments and nozzles combinations. If no combo is found 
# the cfg values are used.
# 
# For SuperSlicer/PrusaSlicer this could look like
#    PRESSURE_ADVANCE_SELECT NOZZLE=[nozzle_diameter] FILAMENT=[filament_settings_id]
#
#####################################################################
#  Console ussage
#####################################################################
# PRESSURE_ADVANCE_LIST: List all pressure advanve and smooth 
# time for the different filaments and nozzles
# 
# PRESSURE_ADVANCE_ADD FILAMENT=<id> [NOZZLE=<value>] [PRESSURE_ADVANCE=<value>] [SMOOTH_TIME=<value>]:
# Add new filaments, or nozzle to an existing filament or change pa settings for
# for an existing filament nozzle combination.
# Nozzle is defaulted to 0.4 and preasure advance/smoth time to the cfg values if not defined at the call
# !!! Caution do not use special characters like äüö or anything else in the name !!!
#
# PRESSURE_ADVANCE_REMOVE FILAMENT=<id> [NOZZLE=<value>]: Remove a definition
# If FILAMENT/NOZZLE is defined then only the coresponding nozzle setup will removed otherwise the complete
# filament.
#
#####################################################################
[gcode_macro PRESSURE_ADVANCE_LIST]
description: List all filament pressure advance settings 
gcode:
  {% if not printer.save_variables.variables.pressure_advance %}
    {action_respond_info("PRESSURE ADVANCE: No filament defined ABORDED")}
  {% else %}
    {% set pa_dic = printer.save_variables.variables.pressure_advance %}
    {% set out = ["PRESSURE ADVANCE: Defined filaments"] %}
    {% for filament in pa_dic|sort(attribute='id') %}
      {% set _dummy = out.append("%s" % filament.id) %}
      {% for setup in filament.val|sort(attribute='nozzle') %}
        {% set _dummy = out.append("Nozzle: %1.02f | Pressure Advance: %1.03f | Smooth Time: %1.03f" % 
           (setup.nozzle, setup.pa, setup.st)) %}
      {% endfor %}
    {% endfor %}
    {action_respond_info(out|join("\n"))}
  {% endif %}

[gcode_macro PRESSURE_ADVANCE_ADD]
description: Add or change pressure advance settings
gcode:
  {% if 'FILAMENT' not in params|upper %}
    {action_respond_info("PRESSURE ADVANCE: FILAMENT must be defined use \"PRESSURE_ADVANCE_ADD FILAMENT=id\" as a minimum")}
  {% else %}
    {% set cfg = printer.configfile.settings.extruder %}
    {% set id = params.FILAMENT|string %}
    {% set nozzle = params.NOZZLE|default(0.40)|float|round(2) %}
    {% if not printer.save_variables.variables.pressure_advance %} # add first entry
      {action_respond_info("PRESSURE ADVANCE: Initialize with Filament %s" % (id))}
      {% set pa_dic = [{'id' : id, 
                        'val': [{'nozzle': nozzle, 
                        'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3), 
                        'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}]}] %}
    {% else %}
      {% set pa_dic = printer.save_variables.variables.pressure_advance %}
      {% for filament in pa_dic %}
        {% if id == filament.id %}
          {% set id_index = loop.index0 %}
          {% for setup in filament.val %}
            {% if nozzle == setup.nozzle %} # change value of an existing nozzle st an existing filament
              {% set change_txt = [] %}
              {% if 'PRESSURE_ADVANCE' in params|upper %}
                {% set _dummy = change_txt.append("PRESSURE ADVANCE") %}
                {% set _dummy = pa_dic[id_index].val[loop.index0].update({'pa': params.PRESSURE_ADVANCE|float|round(3)}) %}
              {% endif %}
              {% if 'SMOOTH_TIME' in params|upper %}
                {% set _dummy = change_txt.append("SMOOTH TIME") %}
                {% set _dummy = pa_dic[id_index].val[loop.index0].update({'st': params.SMOOTH_TIME|float|round(3)}) %}
              {% endif %}
              {% if change_txt|length > 0 %}
                {action_respond_info("PRESSURE ADVANCE: Changed %s at Filament %s Nozzle %s" % (change_txt|join(" and "),id,nozzle))}
              {% else %}
                {action_respond_info("PRESSURE ADVANCE: Nothing changed at Filament %s Nozzle %s" % (id,nozzle))}
              {% endif %}
            {% elif loop.last %} # add a new nozzle to an existing filament
              {action_respond_info("PRESSURE ADVANCE: Add setup for Nozzle %s at Filament %s" % (nozzle,id))}
              {% set _dummy = pa_dic[id_index].val.append({'nozzle': nozzle, 
                                                           'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3), 
                                                           'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}) %}
            {% endif%}
          {% endfor %}
        {% elif loop.last %} # add a new filament
          {action_respond_info("PRESSURE ADVANCE: Add setup for Filament %s" % (id))}
          {% set _dummy = pa_dic.append({'id' : id, 
                                         'val': [{'nozzle': nozzle, 
                                         'pa'    : params.PRESSURE_ADVANCE|default(cfg.pressure_advance)|float|round(3), 
                                         'st'    : params.SMOOTH_TIME|default(cfg.pressure_advance_smooth_time)|float|round(3)}]}) %}
        {% endif %}
      {% endfor %}
    {% endif %}
    SAVE_VARIABLE VARIABLE=pressure_advance VALUE="{pa_dic}"
  {% endif %}

[gcode_macro PRESSURE_ADVANCE_REMOVE]
description: Remove a filament or a nezzle setup
gcode:
  {% if 'FILAMENT' not in params|upper %}
    {action_respond_info("PRESSURE ADVANCE: FILAMENT must be defined use \"PRESSURE_ADVANCE_REMOVE FILAMENT=id\" as a minimum")}
  {% else %}
    {% if not printer.save_variables.variables.pressure_advance %} # nothing setup'ed yet
      {action_respond_info("PRESSURE ADVANCE: Nothing to remove, no save_variable defined yet")}
    {% else %}
      {% set id = params.FILAMENT|string %}
      {% set pa_dic = printer.save_variables.variables.pressure_advance %}
      {% for filament in pa_dic %}
        {% if id == filament.id %}
          {% if 'NOZZLE' in params|upper %}
            {% set nozzle = params.NOZZLE|float|round(2) %}
            {% set id_index = loop.index0 %}
            {% for setup in filament.val %}
              {% if nozzle == setup.nozzle %} # remove nozzle
                {action_respond_info("PRESSURE ADVANCE: Remove Nozzle %s at Filament %s" % (nozzle,id))}
                {% set _dummy = pa_dic[id_index].val.pop(loop.index0) %}
              {% elif loop.last %} # nozzle not found
                {action_respond_info("PRESSURE ADVANCE: Nothing to remove, Nozzle %s at Filament %s not defined" % (nozzle,id))}
              {% endif%}
            {% endfor %}
          {% else %} # remove filament
            {action_respond_info("PRESSURE ADVANCE: Remove Filament %s" % id)}
            {% set _dummy = pa_dic.pop(loop.index0) %}
          {% endif %}
        {% elif loop.last %} # filament not found
          {action_respond_info("PRESSURE ADVANCE: Nothing to remove, Filament %s not defined" % id)}
        {% endif %}
      {% endfor %}
    {% endif %}
    SAVE_VARIABLE VARIABLE=pressure_advance VALUE="{pa_dic}"
  {% endif %}

[gcode_macro PRESSURE_ADVANCE_SELECT]
description: Set PA depending on nozzle and filament 
gcode:
  {% if not printer.save_variables.variables.pressure_advance %}
    {action_respond_info("PRESSURE ADVANCE: No filament defined ABORDED")}
  {% else %}
    {% set nozzle = params.NOZZLE|default(0.4)|float %}
    {% set id = params.FILAMENT|default('None')|string %}
    {% set pa_dic = printer.save_variables.variables.pressure_advance %}
    {% set found = {'id'    : 'default',
                    'nozzle': 0.4,
                    'pa'    : printer.configfile.settings.extruder.pressure_advance,
                    'st'    : printer.configfile.settings.extruder.pressure_advance_smooth_time} %}
    {% for filament in pa_dic %}
      {% if id == filament.id %}
        {% for setup in filament.val %}
          {% if nozzle == setup.nozzle %}
            {% set _dummy = found.update({'id': filament.id}) %}
            {% set _dummy = found.update({'nozzle': setup.nozzle}) %}
            {% set _dummy = found.update({'pa': setup.pa}) %}
            {% set _dummy = found.update({'st': setup.st}) %}
          {% endif %}
        {% endfor %}
      {% endif %}
    {% endfor %}
    SET_PRESSURE_ADVANCE ADVANCE={found.pa} SMOOTH_TIME={found.st}
    {action_respond_info("PRESSURE ADVANCE:
                          Filament: %s   Nozzle: %1.02f
                          Pressure Advance: %1.03f Smooth Time: %1.03f" % (found.id, found.nozzle, found.pa, found.st))}
  {% endif %}


############################################
# 5.- Pressure Advance Calibration and Tune
############################################

[gcode_macro CALIBRATE_PRESSURE_ADVANCE]
description: Print a Pressure Advance test pattern
variable_parameter_BED_TEMP: 85
variable_parameter_EXTRUDER_TEMP: 240
variable_parameter_EXTRUSION_FACTOR: 100
variable_parameter_NOZZLE: 0.4
gcode:
    {% set extrusion_factor = (params.EXTRUSION_FACTOR | default(100) | float) / 100 %}
    {% set bed_temp = params.BED_TEMP | default(85) %}
    {% set extruder_temp = params.EXTRUDER_TEMP | default(240) %}
    {% set nozzle = params.NOZZLE | default(0.4) %}

    # configure print start
    _SETUP_PRINT_START EXTRUDER_TEMP={extruder_temp} BED_TEMP={bed_temp} PRINT_START_X=80 PRINT_START_Y=80 PRINT_END_X=210 PRINT_END_Y=210

    # configure pressure advance
    SET_GCODE_VARIABLE MACRO=_CALIBRATE_PRESSURE_ADVANCE VARIABLE=extrusion_factor VALUE={extrusion_factor}
    SET_GCODE_VARIABLE MACRO=_CALIBRATE_PRESSURE_ADVANCE VARIABLE=nozzle VALUE={nozzle}

    # run print job
    SDCARD_PRINT_FILE FILENAME="Calibration/pressure_advance.gcode"

[gcode_macro _CALIBRATE_PRESSURE_ADVANCE]
description: calls the underlying _PA_CAL macro from the test print using gcode variables
variable_extrusion_factor: 1.0
variable_nozzle: 0.4
gcode:
    {% set cpa = printer['gcode_macro _CALIBRATE_PRESSURE_ADVANCE'] %}
    _PA_CAL EXTRUSION_FACTOR={cpa.extrusion_factor} NOZZLE={cpa.nozzle}

## This is a fork of https://github.com/ksanislo/klipper-pa_cal
## Forked because I dont want to deal with the install script touching the config file since I keep those in git.
## also I wanted parameter not save variables

################################################
###### STANDARD PRESSURE ADVANCE TUNE     ######
################################################

## Obtained at https://github.com/garethky/klipper-voron2.4-config/blob/mainline/printer_data/config/pa-cal.cfg
## This is a fork of https://github.com/ksanislo/klipper-pa_cal
## Forked because I dont want to deal with the install script touching the config file since I keep those in git.
## also I wanted parameter not save variables

[gcode_macro _PA_CAL]
# Klipper pressure advance line calibration macro.
# Usage: PA_CAL PA_START=0.0 PA_STOP=0.1 PA_STEPS=20 NOZZLE=0.4
# Or you can execute with no parameters, which will use values from printer.cfg and saved_variables.cfg.

# Based on http://realdeuce.github.io/Voron/PA/pressure_advance.html
# Sourced from u/Deepsiks, assisted by u/imoftendisgruntled, u/scul86, and thanks to u/beansisfat, u/stray_r
# Cleaned up and moved to using saved_variables.cfg by u/jibbsisme
# Fully parameterized and extended by u/ksanislo

description: Tune Pressure Advance
gcode:
  { action_respond_info("In _PA_CAL")}

  # macro parameters
  {% set ER = params.EXTRUSION_FACTOR|default(1.0)|float %}
  {% set NOZZLE = params.NOZZLE|default(printer.configfile.config["extruder"]["nozzle_diameter"])|float %}

  # Less commonly needed variables
  {% set PA_START = params.PA_START|default(0.0)|float %}
  {% set PA_STOP = params.PA_STOP|default(0.1)|float %}
  {% set PA_STEPS = params.PA_STEPS|default(20)|int %}
  {% set FD = printer.configfile.config["extruder"]["filament_diameter"]|float %}
  {% set AR = params.pa_accel|default(3000) %}
  {% set DR = params.pa_accel_to_decel|default(1500) %}
  {% set SL = params.pa_slow_length|default(20) %}
  {% set FL = params.pa_fast_length|default(40) %}
  {% set BL = params.pa_between_lines|default(5) %}
  {% set MS = params.pa_move_speed|default(300)*60 %}
  {% set SS = params.pa_slow_speed|default(20)*60 %}
  {% set FS = params.pa_fast_speed|default(140)*60 %}
  {% set ZS = params.pa_z_speed|default(20)*60 %}
  {% set RS = params.pa_retract_speed|default(35)*60 %}
  {% set RD = params.pa_retract_dist|default(NOZZLE) %}
  {% set LH = params.pa_layer_height|default(0.20) %}
  {% set LR = params.pa_line_ratio|default(1.25) %}
  {% set BE = params.pa_bold_extrude|default(1.1)|float %}
  {% set EF = params.pa_enable_frame|default(1) %}
  {% set EM = params.pa_enable_markers|default(0) %}
  {% set PV = params.pa_print_values|default(1) %}
  {% set PH = params.pa_print_height|default(4) %}
  {% set ML = params.pa_marker_length|default(BL*2) %}
  {% set DU = params.pa_draw_underline|default(1) %}
  {% set UO = params.pa_underline_overlap|default(0.25)|float %}
  {% set PP = params.pa_precision|default("%.3f") %}

  {% set PX = PH/4 %}
  # calculated variables
  {% if printer.configfile.config['printer']['kinematics'] == 'delta' %}
    {% set X_MID = 0.0|float %}
    {% set Y_MID = 0.0|float %}
  {% else %}
    {% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
    {% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
  {% endif %}
  {% set STARTX = X_MID - (((SL*2)+FL)/2) %}
  {% set STARTY = Y_MID - (PA_STEPS * BL / 2.0) %}
  {% set PA_STEP = (PA_STOP - PA_START) / PA_STEPS|float %}
  {% set LINE_WIDTH = NOZZLE * LR|float %}
  {% set ERAT = LINE_WIDTH * LH / ((FD / 2)*(FD / 2) * 3.14159) * ER|float %}
  
  G21 ; millimeter units
  G90 ; absolute XYZ
  M83 ; relative E
  SET_VELOCITY_LIMIT ACCEL={AR} ACCEL_TO_DECEL={DR}
  G92 E0
  M106 S0

  # draw framing lines
  {% if EF == 1 %} ; only frame if enabled
    G1 X{STARTX} Y{STARTY} F{MS}      ; move to start position
    G1 Z{LH} F{ZS}                    ; move to layer height
    G1 E{RD} F{RS}                    ; un-retract
    G1 Y{STARTY+(PA_STEPS*BL)} E{ERAT*(PA_STEPS*BL)*BE} F{SS}; print first frame line
    G1 X{STARTX+LINE_WIDTH}           ; shift over
    G1 Y{STARTY} E{ERAT*(PA_STEPS*BL)*BE} ; print first return frame line
    G1 E-{RD} F{RS}                   ; retract
    G1 X{STARTX+FL+(SL*2)} F{MS}      ; move to second line start
    G1 E{RD} F{RS}                    ; un-retract
    G1 Y{STARTY+(PA_STEPS*BL)} E{ERAT*(PA_STEPS*BL)*BE} F{SS}; print second frame line
    G1 X{STARTX+FL+(SL*2)-LINE_WIDTH} ; shift over
    G1 Y{STARTY} E{ERAT*(PA_STEPS*BL)*BE} ; print second return frame line
    G1 E-{RD} F{RS}                   ; retract
  {% endif %}

  # draw markers
  {% if EM == 1 %} ; only when markers enabled
    G1 X{STARTX+SL+FL} Y{STARTY-ML} F{MS} ; marker 1 start
    G1 E{RD} F{RS}                     ; un-retract
    G1 Y{STARTY} E{ERAT*ML} F{SS}      ; marker 1 end
    G1 E-{RD} F{RS}                    ; retract
    G1 X{STARTX+SL} Y{STARTY-ML} F{MS} ; marker 2 start
    G1 E{RD} F{RS}                     ; un-retract
    G1 Y{STARTY} E{ERAT*ML} F{SS}      ; marker 2 end
    G1 E-{RD} F{RS}                    ; retract
    G1 X{STARTX+SL} Y{STARTY+(PA_STEPS*BL)+ML} F{MS} ; marker 3 start
    G1 E{RD} F{RS}                     ; un-retract
    G1 Y{STARTY+(PA_STEPS*BL)} E{ERAT*ML} F{SS} ; marker 3 end
    G1 E-{RD} F{RS}                    ; retract
    G1 X{STARTX+SL+FL} Y{STARTY+(PA_STEPS*BL)+ML} F{MS} ; marker 4 start
    G1 E{RD} F{RS}                     ; un-retract
    G1 Y{STARTY+(PA_STEPS*BL)} E{ERAT*ML} F{SS} ; marker 4 end
    G1 E-{RD} F{RS}                    ; retract
  {% endif %}

  # draw the actual test lines
  { action_respond_info("Printing pressure advance pattern")}
  {% for i in range(0, PA_STEPS+1) %}
    {% set PA_VAL = PA_START + (i * PA_STEP) %}
    SET_PRESSURE_ADVANCE ADVANCE={PA_VAL}   ; set Pressure Advance
    M117 PA={PA_VAL}, STEP={PA_STEP}.
    G1 X{STARTX} Y{STARTY+(BL*i)} F{MS}                       ; move to start position
    G1 Z{LH} F{ZS}                                            ; move to layer height
    G1 E{RD} F{RS}                                            ; un-retract
    G1 X{(STARTX+SL)} Y{STARTY+(BL*i)} E{ERAT*SL} F{SS}       ; print line part one
    G1 X{(STARTX+SL+FL)} Y{STARTY+(BL*i)} E{ERAT*FL} F{FS}    ; print line part two
    G1 X{(STARTX+SL+FL+SL)} Y{STARTY+(BL*i)} E{ERAT*SL} F{SS} ; print line part three
    G1 E-{RD} F{RS}                                           ; retract
    G1 Z{LH*2} F{ZS}                                          ; move above layer height    
  {% endfor %}

  # draw pa value labels
  { action_respond_info("Printing pressure advance labels")}
  {% if PV == 1 %}
    {% for i in range(0, PA_STEPS+1) %}
      {% if i is divisibleby(((PH+1)/BL)|round(0,'ceil')|int) %}
      {% set PA_VAL = PA_START + (i * PA_STEP) %}
      SET_PRESSURE_ADVANCE ADVANCE={PA_VAL} ; set Pressure Advance
      M117 PA={PA_VAL}, STEP={PA_STEP}
      G1 X{STARTX+FL+(SL*2)+PX} Y{STARTY+(BL*i)} F{MS}          ; move to label position
      {% for a in PP|format(PA_VAL) %}                          ; convert float to string with specified precision
        G1 Z{LH} F{ZS}                                          ; move to layer height
        G91 ; relative positioning
        {% if a == "." %}
          G1 Y-{2*PX} F{MS}
          G1 E{RD} F{RS}         ; un-retract
          G1 Y{0.5*PX} E{ERAT*(0.5*PX)}
          G1 X{0.5*PX} E{ERAT*(0.5*PX)}
          G1 Y-{0.5*PX} E{ERAT*(0.5*PX)}
          G1 X-{0.5*PX} E{ERAT*(0.5*PX)}
          G1 E-{RD} F{RS}        ; retract
          G1 X{1.5*PX} Y{2*PX} F{MS}
        {% elif a == "0" %}
          G1 Y{2*PX} F{MS}
          G1 E{RD} F{RS}         ; un-retract
          G1 X{2*PX} E{ERAT*2*PX} F{SS}
          G1 Y-{4*PX} E{ERAT*4*PX}
          G1 X-{2*PX} E{ERAT*2*PX}
          G1 Y{4*PX} E{ERAT*4*PX}
          G1 E-{RD} F{RS}        ; retract
          G1 X{3*PX} Y-{2*PX} F{MS}
        {% elif a == "1" %}
          G1 X{PX} Y{2*PX} F{MS}
          G1 E{RD} F{RS}         ; un-retract
          G1 Y-{4*PX} E{ERAT*4*PX} F{SS}
          G1 E-{RD} F{RS}        ; retract
          G1 X{2*PX} Y{2*PX} F{MS}
        {% elif a == "2" %}
          G1 Y{2*PX} F{MS}
          G1 E{RD} F{RS}         ; un-retract
          G1 X{2*PX} E{ERAT*2*PX} F{SS}
          G1 Y-{2*PX} E{ERAT*2*PX}
          G1 X-{2*PX} E{ERAT*2*PX}
          G1 Y-{2*PX} E{ERAT*2*PX}
          G1 X{2*PX} E{ERAT*2*PX}
          G1 E-{RD} F{RS}        ; retract
          G1 X{PX} Y{2*PX} F{MS}
        {% elif a == "3" %}
          G1 Y{2*PX} F{MS}
          G1 E{RD} F{RS}         ; un-retract
          G1 X{2*PX} E{ERAT*2*PX} F{SS}
          G1 Y-{4*PX} E{ERAT*4*PX}
          G1 X-{2*PX} E{ERAT*2*PX}
          G1 E-{RD} F{RS}        ; retract
          G1 Y{2*PX} F{MS}
          G1 E{RD} F{RS}         ; un-retract
          G1 X{2*PX} E{ERAT*2*PX} F{SS}
          G1 E-{RD} F{RS}        ; retract
          G1 X{PX} F{MS}
        {% elif a == "4" %}
          G1 Y{2*PX} F{MS}
          G1 E{RD} F{RS}         ; un-retract
          G1 Y-{2*PX} E{ERAT*2*PX} F{SS}
          G1 X{2*PX} E{ERAT*2*PX}
          G1 Y{2*PX} F{MS}
          G1 Y-{4*PX} E{ERAT*4*PX} F{SS}
          G1 E-{RD} F{RS}        ; retract
          G1 X{PX} Y{2*PX} F{MS}
        {% elif a == "5" %}
          G1 X{2*PX} Y{2*PX} F{MS}
          G1 E{RD} F{RS}         ; un-retract
          G1 X-{2*PX} E{ERAT*2*PX} F{SS}
          G1 Y-{2*PX} E{ERAT*2*PX}
          G1 X{2*PX} E{ERAT*2*PX}
          G1 Y-{2*PX} E{ERAT*2*PX}
          G1 X-{2*PX} E{ERAT*2*PX}
          G1 E-{RD} F{RS}        ; retract
          G1 X{3*PX} Y{2*PX} F{MS}
        {% elif a == "6" %}
          G1 X{2*PX} Y{2*PX} F{MS}
          G1 E{RD} F{RS}         ; un-retract
          G1 X-{2*PX} E{ERAT*2*PX} F{SS}
          G1 Y-{4*PX} E{ERAT*4*PX}
          G1 X{2*PX} E{ERAT*2*PX}
          G1 Y{2*PX} E{ERAT*2*PX}
          G1 X-{2*PX} E{ERAT*2*PX}
          G1 E-{RD} F{RS}        ; retract
          G1 X{3*PX} F{MS}
        {% elif a == "7" %}
          G1 E{RD} F{RS}         ; un-retract
          G1 Y{2*PX} E{ERAT*2*PX} F{SS}
          G1 X{2*PX} E{ERAT*2*PX}
          G1 Y-{4*PX} E{ERAT*4*PX}
          G1 E-{RD} F{RS}        ; retract
          G1 X{PX} Y{2*PX} F{MS}
        {% elif a == "8" %}
          G1 E{RD} F{RS}         ; un-retract
          G1 Y{2*PX} E{ERAT*2*PX} F{SS}
          G1 X{2*PX} E{ERAT*2*PX}
          G1 Y-{4*PX} E{ERAT*4*PX}
          G1 X-{2*PX} E{ERAT*2*PX}
          G1 Y{2*PX} E{ERAT*2*PX}
          G1 X{2*PX} E{ERAT*2*PX}
          G1 E-{RD} F{RS}        ; retract
          G1 X{PX} F{MS}
        {% elif a == "9" %}
          G1 X{2*PX} F{MS}
          G1 E{RD} F{RS}         ; un-retract
          G1 X-{2*PX} E{ERAT*2*PX} F{SS}
          G1 Y{2*PX} E{ERAT*2*PX}
          G1 X{2*PX} E{ERAT*2*PX}
          G1 Y-{4*PX} E{ERAT*4*PX}
          G1 X-{2*PX} E{ERAT*2*PX}
          G1 E-{RD} F{RS}        ; retract
          G1 X{3*PX} Y{2*PX} F{MS}
        {% endif %}
        G90                      ; absolute positioning
        G1 Z{LH*2} F{ZS}         ; move above layer height
      {% endfor %}

      {% if DU == 1 %} ; if draw_underline is enabled
        G1 X{STARTX+FL+(SL*2)+(PX*2)+(PP|format(PA_VAL)|length-1)*(PX*3)} Y{STARTY+(BL*i)-(PX*2)-(LINE_WIDTH*(1-UO))} F{MS} ; move to underline position
        G1 Z{LH} F{ZS}           ; move to layer height
        G1 E{RD} F{RS}           ; un-retract
        G1 X{STARTX+FL+(SL*2)} E{ERAT*((PX*2)+(PP|format(PA_VAL)|length-1)*(PX*3))*BE} F{SS} ; draw underline
        {% if i == 0 %} ; connect first underline to the frame
          G1 Y{STARTY} E{ERAT*((PX*2)+(LINE_WIDTH*(1-UO)))*BE} F{SS}
        {% endif %}
        G1 E-{RD} F{RS}          ; retract
      {% endif %}
      {% endif %}
    {% endfor %}
  {% endif %}

  { action_respond_info("_PA_CAL end")}

