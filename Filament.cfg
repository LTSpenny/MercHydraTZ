#####################################
#     Filament Related Macros.      #
#####################################

# 1.- Reference 
# 2.- Filament Switch Configurations
# 3.- M600 Configuration and Variables / Filament Park
# 4.- Load and Unload Macros/Filament Runout
# 5.- Change Filament/Color Change/Purge
# 6.- Filament Sensor Toggling
# 7.- Nozzle Change Tentative
# 8.- Audio Output
#####################################
# 1.- Reference                     #
#####################################
#####     PLEASE READ BELOW     #####
#####################################
# This macro requires configuration!
# 
# More information available here:
# https://github.com/rootiest/zippy-klipper_config/blob/master/extras/filament_change/README.md
# 
# You must adjust the variables under section 3 M600 Configuration and Variables, this will allow
# you to adjust purge ammounts and other important functions of filament change macro. For parking please look at Maintenance Macros.
# parking macros in this cfg are related to runouts and the macros encompasing this cfg.
#G90= Absolute Positioning
#G91= Relative Positioning
# This will eventually have more filament sensors to accomodate ERCF, add them in filament switch section.

###  Sample Configurations  ###

###############################
### Filament Switch Sensor ####
### https://www.klipper3d.org/Config_Reference.html#filament_switch_sensor ###
###############################
#[filament_switch_sensor filament_sensor]
#switch_pin: ^PB6
#pause_on_runout: False #pause handled by macro
#runout_gcode:
#  FILAMENT_RUNOUT
#insert_gcode:
#  _INSERT_FILAMENT

###############################
### Filament Motion Sensor ####
### https://www.klipper3d.org/Config_Reference.html#filament_motion_sensor ###
###############################
#[filament_motion_sensor smart_filament_sensor]
#switch_pin: ^PB6
#detection_length: 7.0
#extruder: extruder
#pause_on_runout: False #pause handled by macro
#runout_gcode:
#  FILAMENT_RUNOUT
#insert_gcode:
#  _INSERT_FILAMENT

###############################
###                         ###
###      STATUS MACROS      ###
###                         ###
###############################
# STATUS_READY               - LED Ready/Idle State
# STATUS_BUSY                - LED Busy State
# STATUS_HEATING             - LED Extruder Heating State
# STATUS_M600                - LED Runout State
# STATUS_701                 - LED Filament Load State
# STATUS_702                 - LED Filament Unload State
# TELEGRAM_FILAMENT_RUNOUT   - Telegram Alert for runout
# CHANGE_TUNE                - Audio Alert tone

#####################################
# 2.-Filament Switch Configurations #
#####################################

# Filament Switch Above Extruder Gears
[filament_switch_sensor Above_Extruder]
pause_on_runout: False
#   When set to True, a PAUSE will execute immediately after a runout
#   is detected. Note that if pause_on_runout is False and the
#   runout_gcode is omitted then runout detection is disabled. Default
#   is True.
#runout_gcode: 
#   A list of G-Code commands to execute after a filament runout is
#   detected. See docs/Command_Templates.md for G-Code format. If
#   pause_on_runout is set to True this G-Code will run after the
#   PAUSE is complete. The default is not to run any G-Code commands.
#insert_gcode:
#   A list of G-Code commands to execute after a filament insert is
#   detected. See docs/Command_Templates.md for G-Code format. The
#   default is not to run any G-Code commands, which disables insert
#   detection.
#event_delay: 3.0
#   The minimum amount of time in seconds to delay between events.
#   Events triggered during this time period will be silently
#   ignored. The default is 3 seconds.
#pause_delay: 0.5
#   The amount of time to delay, in seconds, between the pause command
#   dispatch and execution of the runout_gcode. It may be useful to
#   increase this delay if OctoPrint exhibits strange pause behavior.
#   Default is 0.5 seconds.
switch_pin: sb2240: PB6
#   The pin on which the switch is connected. This parameter must be
#   provided.

# Filament Switch Above Extruder Gears
#[filament_switch_sensor Below_Extruder]
#pause_on_runout: False
#   When set to True, a PAUSE will execute immediately after a runout
#   is detected. Note that if pause_on_runout is False and the
#   runout_gcode is omitted then runout detection is disabled. Default
#   is True.
#runout_gcode: 
#   A list of G-Code commands to execute after a filament runout is
#   detected. See docs/Command_Templates.md for G-Code format. If
#   pause_on_runout is set to True this G-Code will run after the
#   PAUSE is complete. The default is not to run any G-Code commands.
#insert_gcode:
#   A list of G-Code commands to execute after a filament insert is
#   detected. See docs/Command_Templates.md for G-Code format. The
#   default is not to run any G-Code commands, which disables insert
#   detection.
#event_delay: 3.0
#   The minimum amount of time in seconds to delay between events.
#   Events triggered during this time period will be silently
#   ignored. The default is 3 seconds.
#pause_delay: 0.5
#   The amount of time to delay, in seconds, between the pause command
#   dispatch and execution of the runout_gcode. It may be useful to
#   increase this delay if OctoPrint exhibits strange pause behavior.
#   Default is 0.5 seconds.
#switch_pin: sb2240: PC13
#   The pin on which the switch is connected. This parameter must be
#   provided.

#Smart Filament Sensor Connected to STOP3 on OCTO-PRO Board.
[filament_motion_sensor smart_filament_sensor]
detection_length: 10
extruder: extruder
switch_pin: ^PG11
pause_on_runout: False # pause handled by macro
runout_gcode:
    M117 Runout Detected
    M118 Runout Detected
    FILAMENT_RUNOUT
insert_gcode:
     _INSERT_FILAMENT
    M117 Insert Detected
    M118 Insert Detected
event_delay: 3.0
pause_delay: 0.0001


################################
####### INSERT_FILAMENT ########
################################
[gcode_macro _INSERT_FILAMENT]
gcode:
    {% set m600cfg = printer["gcode_macro _m600cfg"] %}
    M{m600cfg.output|int} Filament Detected!
    {% if m600cfg.auto_load == True %}
        LOAD_FILAMENT
    {% endif %}

################################
# 3.- M600 CONFIGURATION       #
################################
#Configure Below
[gcode_macro _m600cfg]
# The following variables define the behavior of macros in this file:
variable_sensor_name: 'smart_filament_sensor' # The name of the filament sensor used
                                        # The following manage behavior during filament changes:
variable_default_temp: 250              # The default temperature used
variable_x: 50                          # Filament change park coordinate for X
variable_y: 100                         # Filament change park coordinate for Y
variable_zmin: 100                      # Minimum filament change park height
variable_z: 15                          # Filament change z-hop height
variable_load_delay: 40                 # Delay before loading on filament insert
variable_load_fast: 70                  # Length to load the filament before reaching the hotend
variable_load_slow: 40                  # Length to extrude/purge filament out of hotend
variable_unload_length: 95              # Length of filament to retract during unload
variable_purge_length: 50               # Length of filament to extrude during purge
variable_post_load_retraction: 0        # Amount to retract after loading to limit oozing (in mm)
                                        # NOTE: Speeds are given in mm/min 
variable_fast_speed: 1000               # Speed for fast extruder moves (between extruder and hotend)
variable_med_speed: 500                 # Speed for medium extruder moves (extruder catching the new filament)
variable_slow_speed: 250                # Speed for slow extruder moves (actual extrusion out of the hotend)
variable_park_speed: 9000               # Speed of X/Y moves during parking
                                        # See the documentation linked above for details about the below settings
variable_output: 118                    # Select 116, 117, or 118 to specify output method for feedback
variable_led_status: False              # Use LED Status macros such as on the stealthburner
variable_audio_status: False            # Use audio feedback macros
variable_audio_freq: 5                  # The frequency to repeat the audio tone
variable_audio_macro: 'CHANGE_TUNE'     # The frequency to repeat the audio tone
variable_use_telegram: False            # Use Telegram feedback macros
variable_use_fluidd: True               # Output subsequent macro commands to console
                                        # The following manages the optional automated sensor toggling:
variable_auto_sensor: True              # Automate filament sensor toggling
variable_auto_load: True
variable_auto_unload: False

# Do Not Change Below
variable_coldstart: False
variable_runout: False
variable_prev_temp: 0
gcode: # No gcode needed

[gcode_macro M600]
gcode:
    {% set m600cfg = printer["gcode_macro _m600cfg"] %}
    SET_IDLE_TIMEOUT TIMEOUT=7200 ; Increase idle timeout
    {% if printer.idle_timeout.state == "Printing" %}
        PAUSE ; Pause printing
    {% else %}
        CG28 ; Home all axes if not already homed
    {% endif %}
    {% if m600cfg.led_status == True %}
        STATUS_M600
    {% endif %}
    _FILAMENT_PARK
    {% if m600cfg.audio_status == True %}
        ALERT_BEEP_ON
    {% endif %}
    # Check if this is slicer-initiated
    {% if m600cfg.cold_start == False and m600cfg.runout == False %}
        SET_IDLE_TIMEOUT TIMEOUT=3600
        M109 S0
        M{m600cfg.output|int} Filament Change
    {% endif %}
    # Reset check variable
    SET_GCODE_VARIABLE MACRO=_m600cfg VARIABLE=runout VALUE=False


################################
####### Filament Park ########
################################

# Used to park the toolhead for filament changes
[gcode_macro _FILAMENT_PARK]
gcode:
    {% set m600cfg = printer["gcode_macro _m600cfg"] %}
	M{m600cfg.output|int} Parking toolhead...
	SET_GCODE_VARIABLE MACRO=_m600cfg VARIABLE=prev_temp VALUE={printer.extruder.target}
    G91
	{% if printer.toolhead.position.z|float + m600cfg.z|float < printer.configfile.config["stepper_z"]["position_max"]|float %}
		{% if  printer.toolhead.position.z < m600cfg.zmin|int %}
            G1 Z{m600cfg.zmin|int-printer.toolhead.position.z|int}
		{% else %}
            SAVE_GCODE_STATE NAME=save_state
            G1 Z{m600cfg.z|int}
            RESTORE_GCODE_STATE NAME=save_state
        {% endif %}
	{% endif%}
	G90
	G1 X{m600cfg.x|int} Y{m600cfg.y|int} F{m600cfg.park_speed|int}

################################
# 4.- Load and Unload Filament #
################################

[gcode_macro LOAD_FILAMENT]
description: Load Filament Used with Runout Sensor
gcode:
    {% set m600cfg = printer["gcode_macro _m600cfg"] %}
    {% set DELAY = params.DELAY|default(m600cfg.load_delay)|int %}
    {% set SLOW = params.SLOW|default(m600cfg.load_slow)|float %} ; Purge amount
    {% set FAST = params.FAST|default(m600cfg.load_fast)|float %} ; Load length
    ##################
    {% set cur_temp = printer.extruder.temperature|float %} ; Current temperature
    {% set cur_targ = printer.extruder.target|int %}        ; Current target
    {% if printer.configfile.config.extruder.min_extrude_temp is defined %}
        {% set min_temp = printer.configfile.config.extruder.min_extrude_temp|int %}
    {% else %}
        {% set min_temp = 170 %}
    {% endif %}
    {% if m600cfg.prev_temp != 0 %}
        {% set TARGET = m600cfg.prev_temp %}
    {% elif params.TARGET is defined and params.TARGET|int > min_temp %} ; If current temp is below target
        {% set TARGET = params.TARGET|int|default(220) %}
    {% else %}
        {% set TARGET = 220 %}
    {% endif %}
    {% if printer.extruder.target < min_temp %} ; Verify extruder is hot enough
        {% set TARGET = m600cfg.default_temp %} ; Heat up to default temp
    {% else %}
        {% set TARGET = printer.extruder.target %}
    {% endif %}
    CG28 ; Home all axes if not already homed
    {% if cur_temp < (TARGET-5) %}
        {% if m600cfg.led_status == True %}
            STATUS_HEATING
        {% endif %}
        M{m600cfg.output|int} Heating nozzle...
        M109 S{TARGET} ; Heat nozzle to target temperature
    {% endif %}
    {% if m600cfg.led_status == True %}
        STATUS_M701
    {% endif %}
    {% if DELAY > 0 %}
        G4 P{DELAY*1000}
    {% endif %}
    M{m600cfg.output|int}  LOADING...
    G91 ; Relative positioning
    G1 E25.0 F{m600cfg.med_speed|int} ; pre-load
    G1 E{FAST} F{m600cfg.fast_speed|int} ; load up to hotend
    G4 P900 ; wait a moment
    G1 E{SLOW} F{m600cfg.slow_speed|int} ; purge to change filament
    G1 E{m600cfg.post_load_retraction|float}  F{m600cfg.slow_speed|int} ; retract a little
    G90 ; Absolute postitioning
    M400
    {% if m600cfg.coldstart == True %}
        M{m600cfg.output|int} Cooling nozzle...
        M109 S0
        SET_GCODE_VARIABLE MACRO=_m600cfg VARIABLE=coldstart VALUE=False
        {% if m600cfg.auto_sensor == True %}
            DISABLEFILAMENTSENSOR
        {% endif %}
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_m600cfg VARIABLE=prev_temp VALUE=0
    SET_IDLE_TIMEOUT TIMEOUT=900 ; Return idle timeout to normal
    {% if m600cfg.audio_status == True %}
        CHANGE_TUNE
    {% endif %}
    M{m600cfg.output|int} Load Complete
    {% if m600cfg.led_status == True %}
        STATUS_READY
    {% endif %}

[gcode_macro UNLOAD_FILAMENT]
description: Unload Filament Used with Runout Sensor
gcode:
    {% set m600cfg = printer["gcode_macro _m600cfg"] %}
    {% set LENGTH = params.LENGTH|default(m600cfg.unload_length)|float %} ; Unload length
    {% set TARGET = params.TARGET|default(m600cfg.default_temp)|float %} ; Unload temperature
    ##################
    {% if m600cfg.audio_status == True %}
        ALERT_BEEP_OFF
    {% endif %}
    {% set cur_temp = printer.extruder.temperature|float %} ; Current temperature
    {% set cur_targ = printer.extruder.target|int %}        ; Current target
    {% if printer.configfile.config.extruder.min_extrude_temp is defined %}
        {% set min_temp = printer.configfile.config.extruder.min_extrude_temp|int %}
    {% else %}
        {% set min_temp = 170 %}
    {% endif %}
    {% if m600cfg.prev_temp != 0 %}
        {% set TARGET = m600cfg.prev_temp %}
    {% elif params.TARGET is defined and params.TARGET|int > min_temp %} ; If current temp is below target
        {% set TARGET = params.TARGET|int|default(m600cfg.default_temp) %}
    {% endif %}
    CG28 ; Home all axes if not already homed
    {% if cur_temp < (TARGET-5) %}
        {% if m600cfg.led_status == True %}
            STATUS_HEATING
        {% endif %}
        M{m600cfg.output|int} Heating nozzle...
        M109 S{TARGET} ; Heat nozzle to target temperature
    {% endif %}
    {% if m600cfg.led_status == True %}
        STATUS_M702
    {% endif %}
    G91 ; Relative positioning
    # Pre-unload to loosen filament
    G1 E5.0 F1200 ; Extrude a bit 
    G1 E3.0 F1600 ; Extrude a bit
    G1 E-13.14 F7000 ; pull hard
    # Unload
    G1 E-{LENGTH} F{m600cfg.fast_speed|int}
    G90 ; Absolute postitioning
    M400
    {% if m600cfg.auto_sensor == True %}
        ENABLEFILAMENTSENSOR
    {% endif %}
    M{m600cfg.output|int} Unload Complete.
    {% if m600cfg.led_status == True %}
        STATUS_BUSY
    {% endif %}

################################
####### FILAMENT_RUNOUT ########
################################

[gcode_macro FILAMENT_RUNOUT]
description: Procedure when Filament Runout Sensor is triggered
gcode:
    {% set m600cfg = printer["gcode_macro _m600cfg"] %}
    {% if m600cfg.coldstart == False %}
        M{m600cfg.output|int} Filament Runout
        {% if m600cfg.use_telegram == True %}
            TELEGRAM_FILAMENT_RUNOUT
        {% endif %}
        SET_IDLE_TIMEOUT TIMEOUT=3600
        {% if m600cfg.audio_status == True %}
            CHANGE_TUNE
            ALERT_BEEP_ON
        {% endif %}
        M600
        {% if m600cfg.auto_unload == True %}
            M{m600cfg.output|int} Unloading Filament
            UNLOAD_FILAMENT
        {% else %}
            {% if m600cfg.use_fluidd == True %}
                M118 Run UNLOAD_FILAMENT to unload.
                {% if m600cfg.audio_status == True and m600cfg.audio_frequency > 0 %}
                    M118 Run ALERT_BEEP_OFF to silence beeper
                {% endif %}
            {% endif %}
        {% endif %}
        SET_GCODE_VARIABLE MACRO=_m600cfg VARIABLE=prev_temp VALUE={printer.extruder.target}
        SET_GCODE_VARIABLE MACRO=_m600cfg VARIABLE=runout VALUE=True
        M109 S0
    {% endif %}

#########################################
# 5.- Change Filament/Color Change/Purge#
#########################################

[gcode_macro CHANGE_FILAMENT]
description: Change the filament in toolhead
gcode:
    {% set m600cfg = printer["gcode_macro _m600cfg"] %}
    CG28
    SET_GCODE_VARIABLE MACRO=_m600cfg VARIABLE=coldstart VALUE=True
    M{m600cfg.output|int} Filament Change
    M600
    UNLOAD_FILAMENT
    {% if m600cfg.auto_sensor == True %}
        ENABLEFILAMENTSENSOR
    {% endif %}

[gcode_macro COLOR_CHANGE]
description: Procedure when Color Change is triggered
gcode:
    {% set m600cfg = printer["gcode_macro _m600cfg"] %} ; get m600cfg variables
    M{m600cfg.output|int} Filament Runout
    {% if m600cfg.use_telegram == True %}
        TELEGRAM_FILAMENT_RUNOUT
    {% endif %}
    SET_IDLE_TIMEOUT TIMEOUT={m600cfg.m600_idle_time}
    {% if m600cfg.audio_status == True %} ; if using audio status alerts
        {m600cfg.audio_macro}
        ALERT_BEEP_ON
    {% endif %}
    M600
    SET_GCODE_VARIABLE MACRO=_m600cfg VARIABLE=prev_temp VALUE={printer.extruder.target}
    SET_GCODE_VARIABLE MACRO=_m600cfg VARIABLE=runout VALUE=True
    M{m600cfg.output|int} Unloading Filament...
    UNLOAD_FILAMENT 

[gcode_macro PURGE]
gcode:
    {% set m600cfg = printer["gcode_macro _m600cfg"] %}
    {% set LENGTH = params.LENGTH|default(m600cfg.purge_length)|float %} ; Purge length
    ##################
    {% set cur_temp = printer.extruder.temperature|float %} ; Current temperature
    {% set cur_targ = printer.extruder.target|int %}        ; Current target
    {% if printer.configfile.config.extruder.min_extrude_temp is defined %}
        {% set min_temp = printer.configfile.config.extruder.min_extrude_temp|int %}
    {% else %}
        {% set min_temp = 170 %}
    {% endif %}
    {% if m600cfg.prev_temp != 0 %}
        {% set TARGET = m600cfg.prev_temp %}
    {% elif params.TARGET is defined  %} ; If current temp is below target
        {% set TARGET = params.TARGET|int %}
    {% endif %}
    {% if printer.extruder.target < min_temp %} ; Verify extruder is hot enough
        {% set TARGET = m600cfg.default_temp %} ; Heat up to default temp
    {% endif %}
    {% if m600cfg.led_status == True %}
        STATUS_HEATING
    {% endif %}
    M{m600cfg.output|int} Heating nozzle...
    M109 S{TARGET} ; Heat nozzle to target temperature
    {% if m600cfg.led_status == True %}
        STATUS_M701
    {% endif %}
    M{m600cfg.output|int} PURGING..
    G91 ; Relative positioning
    G1 E{LENGTH} F{m600cfg.slow_speed|int} ; Purge filament
    G90 ; Absolute postitioning
    M400
    M109 S{cur_targ} ; Return target temp to previous value
    M{m600cfg.output|int} Purge Complete
    {% if m600cfg.led_status == True %}
        STATUS_READY
    {% endif %}


################################
# 6.- Filament Sensor Toggling #
################################
# Disable filament sensor at startup
#[delayed_gcode _auto_disablefilamentsensor1]
#initial_duration: 2
#gcode:
#    SET_FILAMENT_SENSOR SENSOR=smart_filament_sensor ENABLE=0
#    M118 Filament Motion Sensor has been disabled.

[delayed_gcode AUTO_DISABLEFILAMENTSENSOR]
initial_duration: 2
gcode:
    {% set m600cfg = printer["gcode_macro _m600cfg"] %}
    {% if m600cfg.auto_sensor == True %} ; If automated sensor feature is enabled
        SET_FILAMENT_SENSOR SENSOR={m600cfg.sensor_name} ENABLE=0 ; Disable sensor
         M118 Filament Motion Sensor has been disabled for startup.
    {% endif %}

# Enable filament sensor
[gcode_macro ENABLEFILAMENTSENSOR]
description: Activates filament sensor   
gcode:
    {% set m600cfg = printer["gcode_macro _m600cfg"] %}
    {% set SENSOR = params.SENSOR|default(m600cfg.sensor_name) %} ; get sensor
    M{m600cfg.output|int} Enabling filament sensor
    SET_FILAMENT_SENSOR SENSOR={SENSOR} ENABLE=1

# Disable filament sensor
[gcode_macro DISABLEFILAMENTSENSOR]
description: Deactivates filament sensor
gcode:
    {% set m600cfg = printer["gcode_macro _m600cfg"] %}
    {% set SENSOR = params.SENSOR|default(m600cfg.sensor_name) %} ; get sensor
    M{m600cfg.output|int} Disabling filament sensor
    SET_FILAMENT_SENSOR SENSOR={SENSOR} ENABLE=0
    
################################
# 7- NOZZLE_CHANGE             #
################################
## This macro is used to change the nozzle on the printer
## It prepares the printhead by heating the nozzle to the
## apppropriate temperature and unloading the filament.
## Then the printhead is parked in a convenient position for nozzle changes.
#[gcode_macro NOZZLE_CHANGE]
#description: Prepare the printer for a nozzle change
#gcode:
#    {% set m600cfg = printer["gcode_macro _m600cfg"] %} ; get m600cfg variables
#    CG28 ; Home all axes if not already homed
#    M{m600cfg.output|int} Nozzle Change
#    MAINTENANCE ; Park the toolhead in a convenient position
#    UNLOAD_FILAMENT ; Unload filament
#    M{m600cfg.output|int} Change nozzle now and run NOZZLE_CHANGE_DONE when finished

#[gcode_macro NOZZLE_CHANGE_DONE]
#description: Complete the nozzle change
#gcode:
#    {% set m600cfg = printer['gcode_macro _m600cfg'] %} ; get m600cfg variables
#    LOAD_FILAMENT ; Load filament
#    M104 S0 ; Turn off extruder heater
#    M{m600cfg.output|int} Nozzle Change Complete

################################
# 8.- AUDIO                    #
################################

# Audio alert macros
[delayed_gcode alert_beeper]
gcode:
    {% set m600cfg = printer["gcode_macro _m600cfg"] %}
    {m600cfg.audio_macro} ; Play alert tone
    UPDATE_DELAYED_GCODE ID=alert_beeper DURATION={m600cfg.audio_freq|int}
# Start the alert beep cycle
[gcode_macro ALERT_BEEP_ON]
gcode:
    UPDATE_DELAYED_GCODE ID=alert_beeper DURATION=1
# Stop the alert beep cycle
[gcode_macro ALERT_BEEP_OFF]
gcode:
    UPDATE_DELAYED_GCODE ID=alert_beeper DURATION=0
