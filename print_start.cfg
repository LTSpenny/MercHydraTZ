#[gcode_macro START_PRINT]
#gcode:
     
    # Parameters
#    {% set bed_temp = params.BED_TEMP|int %}
#    {% set extruder_temp = params.EXTRUDER_TEMP|int %}
   # {% set chamber_temp = params.CHAMBER|default(0)|int %}
#  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
#  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
#    _CG28
    # Use absolute coordinates
#    G90
#    M83
#    M117 Heating..
#    M140 S{bed_temp}               ; Start bed heating
#    M190 S{bed_temp}               ; Wait for bed to reach temperature
    #M109 S120
#    _Z_TILT_MAYBE
    # Reset the G-Code Z offset (adjust Z offset if needed)
#    SET_GCODE_OFFSET Z=0.0
    # Home the printer
   # BED_MESH_CALIBRATE
    # Move the nozzle near the bed
  #  G1 Z5 F3000
    # Move the nozzle very close to the bed
  #  G1 Z0.15 F300
    # Set and wait for nozzle to reach temperature
#    M109 S{extruder_temp}
#    VORON_PURGE
#    G90
#    M117 Starting Print .......
#    STATUS_PRINTING

##############################################################
# Start and End Macros
##############################################################

[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
  # {% set chamber_temp = params.CHAMBER|default(0)|int %}
    # Start bed heating (but don't wait for it)
    M140 S{BED_TEMP}
    # Use absolute coordinates
    G90
    # Reset the G-Code Z offset (adjust Z offset if needed)
    SET_GCODE_OFFSET Z=0.0
    # Home the printer
    CG28
    # Wait for bed to reach temperature
    M190 S{BED_TEMP}
    _Z_TILT_MAYBE
    # Reset the G-Code Z offset (adjust Z offset if needed)
    BED_MESH_CALIBRATE
    # Move the nozzle near the bed
    G1 Z5 F3000
    # Move the nozzle very close to the bed
    G1 Z0.15 F300
    # Set and wait for nozzle to reach temperature
    M109 S{EXTRUDER_TEMP}
#    ENABLEFILAMENTSENSOR
    VORON_PURGE
    G90
    M117 Starting Print .......
    STATUS_PRINTING

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
    M117 Print Canceled 
    STATUS_ERROR
    ## Move head and retract only if not already in the pause state and park set to true
    {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
        {% if printer.toolhead.homed_axes == "xyz" %}
            _TOOLHEAD_PARK_PAUSE_CANCEL
        {% endif %}
    {% endif %}
    G91
    G1 Z40 F3000
    game_over_tune
    DISABLEFILAMENTSENSOR
    TURN_OFF_HEATERS
    CANCEL_PRINT_BASE

[gcode_macro END_PRINT]
gcode:
    # Turn off bed, extruder, and fan
    DISABLEFILAMENTSENSOR
    M140 S0
    M104 S0
    M106 S0
    # Raise nozzle by 20mm
    G91
    G1 Z40 F3000    
    # Move nozzle away from print while retracting
    G90
    G1 X350 Y350 E-1 F3500
    # Disable steppers
    M84
    MARIO_TUNE

[gcode_macro POST_END]
gcode:
    #CLEAR_PAUSE
    {% if 't5uid1' in printer %}
    DGUS_PRINT_END
    {% endif %}
    STATUS_SUCCESS
    M220 S100
    M221 S100
    M900 K0
    {% if printer.extruder.temperature >= 170 %}
        M83
        G91
        G1 E-2 F2400
        G1 E-2 Z5 F2400
    {% endif %}
    M82
    G90

    # Calculate our parking height
    {% set Z_POS = printer.toolhead.position.z|default(100) %} # current z_pos
    {% set Z_MAX = printer.toolhead.axis_maximum.z|default(150) %} # z max_pos
    {% set Z_LIMIT = Z_MAX * 0.75 %} # Set the limit to 75% of the z max_pos

    {% if Z_POS < Z_LIMIT %} # make sure current position is below the limit
        {% set Z_PARK = (Z_MAX - Z_POS) * 0.25 %} # 25% of the difference between max_pos and current
    {% else %} # if we are 75% of the way to max already
        {% set Z_PARK = 0 %} # just park at current height
    {% endif %}

    # Use Z_PARK param if supplied
    {% if params.Z_PARK %}
        {% set Z_PARK = (params.Z_PARK - Z_POS)|default(0)|float %}
    {% endif %}

    # Sanity check to make sure the calculated 
    # park_height is at least the current height
    {% if Z_PARK < 0 %} # If it's lower
        {% set Z_PARK = 0 %} # just use the current height
    {% endif %}

    # Park X just off the endstop or use X_PARK param
    {% set X_PARK = params.X_PARK|default(printer.toolhead.axis_minimum.x + 10)|float %}
    # Park Y at the center point or use Y_PARK param
    {% set Y_PARK = params.Y_PARK|default((printer.toolhead.axis_maximum.y + printer.toolhead.axis_maximum.y) * 0.5)|float  %}
    G91
    G1 Z{Z_PARK}
    G90
    G1 X{X_PARK} Y{Y_PARK} F3000

    M104 S0
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=0
    M106 S0
    M84 X Y E
    STATUS_READY
    SAVE_IF_SET

[gcode_macro COMPLETE_PRINT]
description: Finalize print
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set SEQUENCE_NUM = 0 %} ; Reset the counter
    {% set MATERIAL = printer["gcode_macro START_PRINT"].filament %}
    {% set COLOUR = printer["gcode_macro START_PRINT"].colour %}
    SAVE_VARIABLE VARIABLE=last_material VALUE="'{MATERIAL}'"
    SAVE_VARIABLE VARIABLE=last_color VALUE="'{COLOUR}'"
    # Activate fireworks!
    STATUS_SUCCESS
    # Disable filament sensor
    DISABLEFILAMENTSENSOR
    # Turn down controller fans
    SYSTEM_FANS_OFF TARGET=45
    # Turn down the toolboard fan
    TOOLBOARD_FAN_OFF TARGET=45
    # Scrub VOCs
    {% set SCRUB = printer["gcode_macro SCRUBBER"].scrub %}
    {% set SCRUB_TIME = svv.scrub_time %}
    {% if SCRUB > 0 %}
        SCRUBBER TIME={SCRUB_TIME} EXHAUST=1
    {% endif %}
    # Acknowledge success!
    M117 Print Complete
    # Run end sequence
    POST_END
    # Play success tune
    MARIO_TUNE
    CLEAR_STATUS TIMEOUT=60


###########################################################
# Heat Soak Macros
###########################################################

[gcode_macro HEAT_SOAK]
description: heats the bed for a while

variable_target_temp: 0
variable_stage: None ## heating -> soaking -> done -> None

## in seconds
variable_check_interval: 10
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0

gcode:
    {% set printcfg = printer["gcode_macro _printcfg"] %}    {% set TARGET = params.TARGET | default(110) | float %}
    {% set DURATION = (params.DURATION | default(10) | int) * 60 %} ## minutes to seconds

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE={ TARGET }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    ;; fire up the heater
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ TARGET }

    ;; Do the lights
    STATUS_SOAKING


    ;; run the fans to circulate air
    #_FAN_SOAK

    ;; put the bed and nozzle where they're a safe distance apart
    HOME_IF_NEEDED
    PARKBED_MID

    M84 ;; turn off steppers

    ;; Do the lights (again)
    STATUS_SOAKING
    M{printcfg.output|int}  Soaking...

    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ check_interval }

[gcode_macro CANCEL_HEAT_SOAK]
description: cancels an in-progress HEAT_SOAK cycle
gcode:
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=1

[delayed_gcode heat_soaker]
; ## debug
; { action_respond_info( printer['gcode_macro HEAT_SOAK'] | tojson )}
gcode:
    {% set printcfg = printer["gcode_macro _printcfg"] %}    {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}

    ## update total time elapsed
    {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

    {% set stage = heat_soak.stage %}
    {% if stage == "heating" and printer.heater_bed.temperature >= heat_soak.target_temp %}
        {% set stage = "soaking" %}
    {% endif %}

    {% if stage == "soaking" %}
        ## update soak countdown
        {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }

        {% if soak_time_remaining == 0 %}
            {% set stage = "done" %}
        {% endif %}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"

    {% if stage in ("done", "cancel") %}
        STATUS_READY
        _FAN_SOAK_OFF
        {% if stage == "cancel" %}
            {% set stage = "done" %}
            TURN_OFF_HEATERS
            M107 ; turn off fan
            M{printcfg.output|int}  { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }
            game_over_tune
        {% else %}
            M{printcfg.output|int}  { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }
            zelda_end_tune
        {% endif %}

        ## reset all state vars, except stage, which may be queried via the api
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    {% else %}
        {% set BED_TARGET = printer.heater_bed.target|float %}
        {% set BED_TEMP = printer.heater_bed.temperature|float %}
        {% set BED_PROGRESS = (BED_TEMP / BED_TARGET) * 255 %}
        WLED_CONTROL INTENSITY={BED_PROGRESS}
        {% if total_time_elapsed % 90 == 0 %}
            ## output status periodically
            {% if stage == "heating" %}
                M{printcfg.output|int}  { "heating -- %.1fm elapsed" | format(total_time_elapsed / 60.0) }
            {% elif stage == "soaking" %}
                M{printcfg.output|int}  { "soaking -- %.1fm remaining" | format(soak_time_remaining / 60.0) }
            {% endif %}
        {% endif %}

        ## trigger ourselves again
        UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ heat_soak.check_interval }

        ## dwell for 1ms to prevent from going idle
        G4 P1

    {% endif %}

[gcode_macro _FAN_SOAK]
gcode:
    #NEVERMORE_LOW
    BED_FAN_ON
    #PI_FAN_ON
    #SYSTEM_FAN_ON

[gcode_macro _FAN_SOAK_OFF]
gcode:
    NEVERMORE_OFF
    BED_FAN_OFF

###########################################################
# MISC G29
###########################################################
[gcode_macro G29]
description: Bed Leveling
gcode:
    {% set t = params.T|default(0)|float %}

    {% if printer.idle_timeout.state == "Printing" %}
        {action_respond_info("This command cannot be used while printing")}
    {% elif printer.toolhead.homed_axes != "xyz" %}
        {action_respond_info("Please home XYZ first")}
    {% else %}
        SAVE_GCODE_STATE NAME=G29_state
        G90
        G1 Z10 F240
        {% if t > 30.0 %}
        #M190 S{t}
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={t}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={t} MAXIMUM={t+1}
        {% endif %}
        M117 Calibrating Mesh
        BED_MESH_CALIBRATE
        {% if 'S' in params %}
        #M140 S{params.S}
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={params.S+1}
        {% endif %}
        G90
        G1 Z10 F240
        G1 X150 Y155 F6000
        RESTORE_GCODE_STATE NAME=G29_state MOVE=0
    {% endif %}

[gcode_macro M420]
description: Load the current mesh
gcode:
    BED_MESH_PROFILE LOAD=default

[gcode_macro MESH_CHECK]
description: Checks if a mesh exists to determine whether to create a new one
gcode:
    {% if printer.bed_mesh.profiles['default'] is defined %}
        BED_MESH_PROFILE LOAD='default' ; load mesh
    {% else %}
        BED_MESH_CALIBRATE ; generate new mesh
    {% endif %}

#[gcode_macro M73]
#rename_existing: M73.1
#description: Set Current Print Progress.
#gcode:

#    {% set NUM_LAYERS = printer["gcode_macro START_PRINT"].num_layers %}
#    {% set CUR_LAYER = printer["gcode_macro START_PRINT"].cur_layer %}
#    {% set TOOL_CHANGES = printer["gcode_macro START_PRINT"].tool_changes %}
#    {% set CUR_TOOL = printer["gcode_macro START_PRINT"].cur_tool %}

#    {% if params.C %}
#        {% set CUR_TOOL = params.C|default(0)|int %}
#        M118 Tool {CUR_TOOL} of {TOOL_CHANGES}
#        M118 { "%02d:%02d" % (params.C|int // 60, (params.C|int) % 60) } remaining  Layer {CUR_LAYER|int} of {NUM_LAYERS|int}
#        M117 { "%02d:%02d" % (params.C|int // 60, (params.C|int) % 60) } remaining  Layer {CUR_LAYER|int} of {NUM_LAYERS|int}
#    {% elif params.R %}
#        M117 { "%02d:%02d" % (params.R|int // 60, (params.R|int) % 60) } remaining  Layer {CUR_LAYER|int} of {NUM_LAYERS|int}
#    {% elif params.S %}
#        M117 { "%02d:%02d" % (params.S|int // 60, (params.S|int) % 60) } remaining  Layer {CUR_LAYER|int} of {NUM_LAYERS|int}
#    {% else %}
#        M117 { rawparams }
#    {% endif %}
#    M73.1 {rawparams}

[gcode_macro SAVE_IF_SET]
gcode:
    {% if printer["gcode_macro SAVE_AT_END"].save == 1 %}
        SAVE_CONFIG
    {% endif %}

[gcode_macro SAVE_AT_END]
variable_save: 0
gcode:
    SET_GCODE_VARIABLE MACRO=SAVE_AT_END VARIABLE=save VALUE=1

################################
########### PARKING ############
################################


[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  PAUSE_BASE
  _TOOLHEAD_PARK_PAUSE_CANCEL

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read extrude from  _TOOLHEAD_PARK_PAUSE_CANCEL  macro #####
  {% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_park_delta = 2.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

# Initialize some variable defaults
#[delayed_gcode macros_initialize]
#initial_duration: 1
#gcode:
#    INITIALIZE_VARIABLE VARIABLE=park_x VALUE=-5
#    INITIALIZE_VARIABLE VARIABLE=park_y VALUE=220
#    INITIALIZE_VARIABLE VARIABLE=park_z VALUE=150
#    INITIALIZE_VARIABLE VARIABLE=bowden_len VALUE=25
