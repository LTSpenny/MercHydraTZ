################################################
######            HOMING                  ######
################################################
# Usage:
#       Drop in appropriate category, any macros that help with Homing or Bed Tilt!
#                  Sections                    #
#1.- Sensorless Homing X and Y
#2.- Homing Override
#3.- Conditional Homing
#4.- Z Tilt

##################################
# LED Macros Defenition Reference
##################################
# The following status macros are available (these go inside of your macros):
#
#    STATUS_READY
#    STATUS_OFF
#    STATUS_BUSY
#    STATUS_HEATING
#    STATUS_LEVELING
#    STATUS_HOMING
#    STATUS_CLEANING
#    STATUS_MESHING
#    STATUS_CALIBRATING_Z
#    STATUS_COOLING
#    STATUS_PRINTING
#    STATUS_PART_READY
#    STATUS_COOLING

# With additional macros for basic control:
#
#    SET_NOZZLE_LEDS_ON
#    SET_LOGO_LEDS_OFF
#    SET_NOZZLE_LEDS_OFF

################################
# 1.- Sensorless Homing
################################

[gcode_macro _HOME_X]
gcode:
    # Always use consistent run_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc5160 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc5160 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 X
    # Move away
    G91
    G1 X-15 F1200

# Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}
 

[gcode_macro _HOME_Y]
gcode:
    # Set current for sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc5160 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc5160 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 Y
    # Move away
    G91
    G1 Y-15 F1200

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

################################
# 2.- Homing Override
################################

#MAJOR THANKS TO Billiard#5706 - Klipper Discord
[homing_override]
axes: xyz
gcode:
    STATUS_HOMING
    {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}


    {% if home_all or 'Y' in params or ('Z' in params and not 'y' in printer.toolhead.homed_axes) %}
        _HOME_Y
    {% endif %}

    {% if home_all or 'X' in params or ('Z' in params and not 'x' in printer.toolhead.homed_axes) %}
        _HOME_X
    {% endif %}

    {% if home_all or 'Z' in params %}
        G90
        G1 X175 Y175 F6000
        G28 Z 
        G1 Z20
    {% endif %}
    STATUS_READY

[gcode_macro UNSAFE_RAISE_TOOL]
description: Raise the toolhead 10mm without homing
gcode:
    G90
    SET_KINEMATIC_POSITION Z=0
    G0 Z20 F600
    M84

################################
# 3.-Conditional Homing
################################
## Only home if not homed
[gcode_macro CG28]
variable_output: 118 ; Output method for status feedback
gcode:
    {% if "x" in rawparams|string|lower %} ; if x is in rawparams
        {% set X = True %} ; set x flag
    {% endif %}
    {% if "y" in rawparams|string|lower %} ; if y is in rawparams
        {% set Y = True %} ; set y flag
    {% endif %}
    {% if "z" in rawparams|string|lower %} ; if z is in rawparams
        {% set Z = True %} ; set z flag
    {% endif %}
    {% if rawparams|string|lower == "" %} ; if no parameters are defined
        {% set ALL = True %} ; set all flag
        {% set X = True %}   ; set x flag
        {% set Y = True %}   ; set y flag
        {% set Z = True %}   ; set z flag
    {% endif %}
    {% if printer.toolhead.homed_axes != "xyz" %} ; if not homed
        {% if "x" not in printer.toolhead.homed_axes %} ; if x is not homed
            {% set home_x = True %} ; set home_x flag
        {% endif %}
        {% if "y" not in printer.toolhead.homed_axes %} ; if y is not homed
            {% set home_y = True %} ; set home_y flag
        {% endif %}
        {% if "z" not in printer.toolhead.homed_axes %} ; if z is not homed
            {% set home_z = True %} ; set home_z flag
        {% endif %}

        {% if home_x == True and home_y == True and home_z == True %} ; if all axes need to be homed
            {% if ALL == True %} ; if all axes are being homed
                M{output} Homing all axes
                G28 ; Home all axes
            {% else %} ; if only some axes are being homed
                {% if X == True %} ; if x is being homed
                    M{output} Homing X axis
                    G28 X ; Home x axis
                {% endif %}
                {% if Y == True %} ; if y is being homed
                    M{output} Homing Y axis
                    G28 Y ; Home y axis
                {% endif %}
               {% if Z == True %} ; if z is being homed
                    M{output} Homing Z axis
                    G28 Z ; Home z axis
                {% endif %}
            {% endif %}
        {% else %} ; if only some axes need to be homed
            {% if home_x == True %} ; if x needs to be homed
                {% if X == True %} ; if x is being homed
                    M{output} Homing X axis
                    G28 X ; Home x axis
                {% endif %}
            {% endif %}
            {% if home_y == True %} ; if y needs to be homed
                {% if Y == True %} ; if y is being homed
                    M{output} Homing Y axis
                    G28 Y ; Home y axis
                {% endif %}
            {% endif %}
            {% if home_z == True %} ; if z needs to be homed
                {% if Z == True %} ; if z is being homed
                    M{output} Homing Z axis
                    G28 Z ; Home z axis
                {% endif %}
            {% endif %}
        {% endif %}
    {% else %} ; if already homed
        M{output} All axes are homed
    {% endif %}

################################
######## HOME_IF_NEEDED ########
################################

################################
########### HOMING #############
################################

# Only home if not homed
#[gcode_macro HOME_IF_NEEDED]
#gcode:
#   {% set m600cfg = printer["gcode_macro _m600cfg"] %}
#    {% if printer.toolhead.homed_axes != "xyz" %}
#        M{m600cfg.output|int} Homing axis
#        G28
#    {% endif %}

[gcode_macro HOME_IF_NEEDED]
variable_output: 116
gcode:
    {% set printcfg = printer['gcode_macro _printcfg'] %}
    {% if "x" in rawparams|string|lower %}
        {% set X = True %}
    {% endif %}
    {% if "y" in rawparams|string|lower %}
        {% set Y = True %}
    {% endif %}
    {% if "z" in rawparams|string|lower %}
        {% set Z = True %}
    {% endif %}
    {% if rawparams|string|lower == "" %}
        {% set ALL = True %}
        {% set X = True %}
        {% set Y = True %}
        {% set Z = True %}
    {% endif %}
    {% if printer.toolhead.homed_axes != "xyz" %}
        {% if printcfg.led_status == True %}
            {printcfg.homing_status}
        {% endif %}
        {% if "x" not in printer.toolhead.homed_axes %}
            {% set home_x = True %}
        {% endif %}
        {% if "y" not in printer.toolhead.homed_axes %}
            {% set home_y = True %}
        {% endif %}
        {% if "z" not in printer.toolhead.homed_axes %}
            {% set home_z = True %}
        {% endif %}

        {% if home_x == True and home_y == True and home_z == True %}
            {% if ALL == True %}
                M{output} Homing all axes
                G28
            {% else %}
                {% if X == True %}
                    M{output} Homing X axis
                    G28 X
                {% endif %}
                {% if Y == True %}
                    M{output} Homing Y axis
                    G28 Y
                {% endif %}
                {% if Z == True %}
                    M{output} Homing Z axis
                    G28 Z
                {% endif %}
            {% endif %}
        {% else %}
            {% if home_x == True %}
                {% if X == True %}
                    M{output} Homing X axis
                    G28 X
                {% endif %}
            {% endif %}
            {% if home_y == True %}
                {% if Y == True %}
                    M{output} Homing Y axis
                    G28 Y
                {% endif %}
            {% endif %}
            {% if home_z == True %}
                {% if Z == True %}
                    M{output} Homing Z axis
                    G28 Z
                {% endif %}
            {% endif %}
        {% endif %}
        {% if printcfg.led_status == True %}
            {printcfg.ready_status}
        {% endif %}
    {% else %}
        M{output} All axes are homed
    {% endif %}

## conditional home
#[gcode_macro _CG28]
#description: Helper: Conditional homing
#gcode:
#  {% if "xyz" not in printer.toolhead.homed_axes %} G28 {% endif %}

################################
# 4.-Z Tilt
################################

[gcode_macro _Z_TILT_MAYBE]
gcode:
  STATUS_CALIBRATING_Z
  {% if printer["gcode_macro Z_TILT_ADJUST"].adjusted != 1 %}
    Z_TILT_ADJUST
  {% else %}
    {action_respond_info("Z tilt already adjusted, skipping.")} 
  {% endif %}
  STATUS_READY

[gcode_macro Z_TILT_ADJUST]
rename_existing: OG_Z_TILT_ADJUST
variable_adjusted: 0
gcode:
  STATUS_CALIBRATING_Z
  OG_Z_TILT_ADJUST
  G28 Z
  SET_GCODE_VARIABLE MACRO=Z_TILT_ADJUST VARIABLE=adjusted VALUE=1
  STATUS_READY

[gcode_macro M18]
rename_existing: M1800
gcode:
  STATUS_CALIBRATING_Z
  M1800 {rawparams}
  SET_GCODE_VARIABLE MACRO=Z_TILT_ADJUST VARIABLE=adjusted VALUE=0
  STATUS_READY

[gcode_macro M84]
rename_existing: M8400
gcode:
  STATUS_CALIBRATING_Z
  M8400 {rawparams}
  SET_GCODE_VARIABLE MACRO=Z_TILT_ADJUST VARIABLE=adjusted VALUE=0
  STATUS_READY

################################
# 5.- Misc Macros
################################

[gcode_macro M17]
description: Enables Steppers
gcode:
    {% if 'X' in params %}
        SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1
    {% endif %}       
    {% if 'Y' in params %}
        SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1
    {% endif %}     
    {% if 'Z' in params %}
        SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=1
        # If you have dual Z drivers:
        SET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=1
    {% endif %}      
    {% if 'E' in params %}
        SET_STEPPER_ENABLE STEPPER=extruder ENABLE=1
    {% endif %}

[gcode_macro M204]
rename_existing: M204.1
description: Set Starting Acceleration
gcode:
  {% set f = params.F|default(0.5)|float %}

  {% if 'S' in params %}
    {% set s = params.S|float %}
    SET_VELOCITY_LIMIT ACCEL={s} ACCEL_TO_DECEL={ s * f }
  {% else %}
    {% if 'P' in params %}
      {% set p = params.P|float %}
      {% if 'T' in params %}
        {% set t = params.T|float %}
        {% if p < t %}
          SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
        {% else %}
          SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
        {% endif %}
      {% else %}
        SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
      {% endif %}
    {% elif 'T' in params %}
      {% set t = params.T|float %}
      SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
    {% endif %}
  {% endif %}

[gcode_macro M205]
description: Set Advance Settings Corner Velocity
gcode:
  {% if 'X' in params %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.X}
  {% elif 'Y' in params %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.Y}
  {% endif %}

[gcode_macro MOVE_PERCENT]
description: Move toolhead in absolute percentage terms (0 to 1)
gcode:
    {% set ns = namespace(hasErrors = False, command = 'G0') %}

    {% for param, value in params.items() %}
        {% set value = value|float %}
        {% if param == 'F'%}
        {% set ns.command = ns.command ~ ' ' ~ param ~ value|string %}
        {% else %}
        {% set axis = param|lower %}
        {% if value <0 or value > 1.0 %}
            {% set ns.hasErrors = True %}
            RESPOND TYPE=error MSG="{param} out of range [0, 1.0]"
        {% endif %}
        {% set ns.command = ns.command ~ ' ' ~ param ~ (value * printer.toolhead.axis_maximum[axis]|float)|string %}
        {% endif %}
    {% endfor %}

    {% if not ns.hasErrors %}
        SAVE_GCODE_STATE NAME=move_percent_state
        G90
        {ns.command}
        RESTORE_GCODE_STATE NAME=move_percent_state
    {% endif %}