# The following status macros are available (these go inside of your macros):
#
#    STATUS_READY
#    STATUS_OFF
#    STATUS_BUSY
#    STATUS_HEATING
#    STATUS_LEVELING
#    STATUS_HOMING
#    STATUS_CLEANING
#    STATUS_MESHING
#    STATUS_CALIBRATING_Z
#    STATUS_COOLING
#    STATUS_PRINTING
#    STATUS_PART_READY
#    STATUS_COOLING

# With additional macros for basic control:
#
#    SET_NOZZLE_LEDS_ON
#    SET_LOGO_LEDS_OFF
#    SET_NOZZLE_LEDS_OFF

################################
# Maintenance
################################


[gcode_macro MAINTENANCE]
#
# MAINTENANCE
#
# Move the toolhead to 1/2 max above the bed and the front centre
#
description: move the toolhead to a convenient position for working on it
gcode:

    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    {% set mid_x = max_x / 2.0 %}
    {% set z50 = max_z * 0.5 %}

    STATUS_BUSY
    HOME_IF_NEEDED
    G0 X{mid_x} Y0 Z{z50} F3000
    STATUS_READY

################################
# Z Tilt
################################

[gcode_macro _Z_TILT_MAYBE]
gcode:
  STATUS_CALIBRATING_Z
  {% if printer["gcode_macro Z_TILT_ADJUST"].adjusted != 1 %}
    Z_TILT_ADJUST
  {% else %}
    {action_respond_info("Z tilt already adjusted, skipping.")} 
  {% endif %}
  STATUS_READY

[gcode_macro Z_TILT_ADJUST]
rename_existing: OG_Z_TILT_ADJUST
variable_adjusted: 0
gcode:
  STATUS_CALIBRATING_Z
  OG_Z_TILT_ADJUST
  G28 Z
  SET_GCODE_VARIABLE MACRO=Z_TILT_ADJUST VARIABLE=adjusted VALUE=1
  STATUS_READY

[gcode_macro M18]
rename_existing: M1800
gcode:
  STATUS_CALIBRATING_Z
  M1800 {rawparams}
  SET_GCODE_VARIABLE MACRO=Z_TILT_ADJUST VARIABLE=adjusted VALUE=0
  STATUS_READY

[gcode_macro M84]
rename_existing: M8400
gcode:
  STATUS_CALIBRATING_Z
  M8400 {rawparams}
  SET_GCODE_VARIABLE MACRO=Z_TILT_ADJUST VARIABLE=adjusted VALUE=0
  STATUS_READY

###############################
# Print Start
################################

[gcode_macro START_PRINT]
description: Loads and starts the print
variable_x_max: 0
variable_y_max: 0
variable_z_max: 0
variable_nozzle: 0
variable_fila_dia: 0
variable_filament: "PLA"
variable_bed_temp: 0
variable_extruder_temp: 0
variable_chamber_temp: 0
variable_layer_count: 0
variable_tool_changes: 0
variable_colour: "000000"
variable_cur_tool: 0
variable_cur_layer: 0
variable_num_layers: 0
variable_layer_z: 0
variable_print_min_x: 0
variable_print_min_y: 0
variable_print_max_x: 0
variable_print_max_y: 0
variable_sequential_print: 0
variable_sequence_num: 0
variable_sfs: 0
variable_dehumid: 0
variable_filter: 0
variable_output: 117
gcode:

    M{output} Print intializing...
    STATUS_BUSY
    START_TONES

    # Use saved variables
    {% set svv = printer.save_variables.variables %}

    # load printcfg variables
    {% set printcfg = printer['gcode_macro _printcfg'] %}

    #Get Printer built volume dimensions
    {% set X_MAX = printer.toolhead.axis_maximum.x|default(100)|float %}
    {% set Y_MAX = printer.toolhead.axis_maximum.y|default(100)|float %}
    {% set Z_MAX = printer.toolhead.axis_maximum.z|default(100)|float %}

    #Get Nozzle diameter and filament width for conditioning
    {% set NOZZLE = printer.extruder.nozzle_diameter|default(0.4)|float %}
    {% set FILADIA = printer.extruder.filament_diameter|default(1.75)|float %}

    #Set Start coordinates of priming lines
    {% set X_START = printer.toolhead.axis_minimum.x|default(0)|float + NOZZLE %}
    {% set Y_START = printer.toolhead.axis_minimum.y|default(0)|float + NOZZLE %}

    #Calculate Primer line extrusion volume and filament length
    {% set PRIMER_WIDTH = 0.75 * NOZZLE %}                    
    {% set PRIMER_HEIGHT = 0.70 * NOZZLE %}           
    {% set PRIMER_SECT = PRIMER_WIDTH * PRIMER_HEIGHT %}    
    {% set PRIMER_VOL = PRIMER_SECT * (X_MAX - 3 * X_START) %}    
    {% set FILA_SECT = 3.1415 * ( FILADIA / 2.0)**2 %}          
    {% set FILA_LENGTH = 1.55 * PRIMER_VOL / FILA_SECT %}
    {% set MATERIAL = params.MATERIAL|default(printcfg.material_type)|string %}
    {% set COLOUR = params.COLOUR|default(printcfg.material_color)|string %}

    #Get Bed, Extruder, and Chamber temperatures from Slicer GCode
    {% set BED_TEMP = params.BED|default(printcfg.bed_temp)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER|default(printcfg.extruder_temp)|float %}
    {% set CHAMBER_TEMP = params.CHAMBER|default(printcfg.chamber_temp)|float %}

    # Get Number of Layers
    {% set NUM_LAYERS = params.COUNT|default(printcfg.layer_count)|float %}
    {% set CUR_LAYER = params.NUM|default(printcfg.layer_num)|float + 1 %}

    # Get Number of Tool Changes Required
    {% set TOOL_CHANGES = params.TOOLS|default(printcfg.tool_count)|float %}
    {% set CUR_TOOL = params.CUR_TOOL|default(1)|float %}

    # Establish print area
    #{% set print_min_x = params.PRINT_MIN.split(",")[0]|float %}
    #{% set print_min_y = params.PRINT_MIN.split(",")[1]|float %}
    #{% set print_max_x = params.PRINT_MAX.split(",")[0]|float %}
    #{% set print_max_y = params.PRINT_MAX.split(",")[1]|float %}

    # Establish sequential print parameters
    {% set SEQUENTIAL = params.SEQUENTIAL|default(0) %}
    {% set SEQUENCE_NUM = printer["gcode_macro START_PRINT"].sequence_num %}

    # Scrub VOCs with Nevermore
    {% if params.SCRUB == null %}
        {% set SCRUB_TIME = 666 %}
        {% set SCRUB = 0 %}
    {% endif %}
    {% if MATERIAL == 'ABS' %}
        {% if params.SCRUB == null %}
        {% set SCRUB = 1 %}
        {% else %}
        {% set SCRUB = params.SCRUB %}
        {% endif %}
        {% set SCRUB_TIME = 600 %}
    {% elif MATERIAL == 'ABS+' %}
        {% if params.SCRUB == null %}
        {% set SCRUB = 1 %}
        {% else %}
        {% set SCRUB = params.SCRUB %}
        {% endif %}
        {% set SCRUB_TIME = 600 %}
    {% elif MATERIAL == 'ASA' %}
        {% if params.SCRUB == null %}
        {% set SCRUB = 1 %}
        {% else %}
        {% set SCRUB = params.SCRUB %}
        {% endif %}
        {% set SCRUB_TIME = 666 %}
    {% else %}
        {% set SCRUB = params.SCRUB|default(0) %}
        {% set SCRUB_TIME = 666 %}
    {% endif %}

    # Use Smart Filament Sensor
    {% set SFS = params.SFS|default(1)|int %}

    # Reduce moisture with dehumidifier
    {% set DEHUMID = params.DEHUMID|default(0)|int %}

    # Filter microplastic particles
    {% set FILTER = params.FILTER|default(0)|int %}

    # Enable drawing wipe line
    {% set WIPE = params.WIPE|default(0)|int %}

    # Save print configuration specs for later use
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=x_max VALUE={X_MAX}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=y_max VALUE={Y_MAX}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=z_max VALUE={Z_MAX}

    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=nozzle VALUE={NOZZLE}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=fila_dia VALUE={FILADIA}

    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=filament VALUE="'{MATERIAL}'"
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=colour VALUE="'{COLOUR}'"
    SAVE_VARIABLE VARIABLE=last_color VALUE="'{COLOUR}'"

    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=bed_temp VALUE={BED_TEMP}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=extruder_temp VALUE={EXTRUDER_TEMP}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=chamber_temp VALUE={CHAMBER_TEMP}

    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=cur_layer VALUE={CUR_LAYER}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=num_layers VALUE={NUM_LAYERS}

    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=tool_changes VALUE={TOOL_CHANGES}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=cur_tool VALUE={CUR_TOOL}

    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=print_min_x VALUE={print_min_x}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=print_min_y VALUE={print_min_y}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=print_max_x VALUE={print_max_x}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=print_max_y VALUE={print_max_y}

    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=sequential_print VALUE={SEQUENTIAL}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=sequence_num VALUE={SEQUENCE_NUM + 1}

    SET_GCODE_VARIABLE MACRO=SCRUBBER VARIABLE=scrub VALUE={SCRUB}
    SET_GCODE_VARIABLE MACRO=SCRUBBER VARIABLE=scrub_time VALUE={SCRUB_TIME}
    SAVE_VARIABLE VARIABLE=scrub_time VALUE={SCRUB_TIME}

    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=sfs VALUE={SFS}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=dehumid VALUE={DEHUMID}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=filter VALUE={FILTER}

    {% set MATERIAL = params.MATERIAL|default('PLA')|string %}
    SAVE_VARIABLE VARIABLE=last_material VALUE="'{MATERIAL}'"
    SET_MATERIAL MATERIAL={MATERIAL}

    # Get in the mood
    #CLEAR_PAUSE

    # Turn on the lights!
    STATUS_BUSY

    # Turn on the control board fans
    SYSTEM_FANS_ON TARGET=20
    # Turn on the toolboard fan
    TOOLBOARD_FAN_ON TARGET=30

    # Make sure case fans are off
    BED_FAN_OFF

    # Turn on Nevermore Carbon Filter
    #{% if SCRUB == 1 %}
    #    NEVERMORE_ON
    #{% endif %}

    # Turn on Dehumidifier
    #{% if DEHUMID == 1 %}
    #    DEHUMID_ON
    #{% else %}
    #    DEHUMID_OFF
    #{% endif %}

    # Turn on Filter
    #{% if FILTER == 1 %}
    #    FILTER_ON
    #{% else %}
    #    FILTER_OFF
    #{% endif %}

    # Turn on Smart Filament Sensor
    ENABLEFILAMENTSENSOR
    
    #{% if SFS == 0 %}
    #  DISABLEFILAMENTSENSOR
    #{% else %}
    #  ENABLEFILAMENTSENSOR
    #{% endif %}

    {% if SEQUENCE_NUM == 0 %}

        # Begin preheating and prepping for print
        G90 ; use absolute coordinates
        M83 ; extruder relative mode

        M{output} Preheating bed
        STATUS_HEATING

        SET_HEATER_TEMPERATURE HEATER=extruder TARGET=150 ; allow partial nozzle warmup
        #G4 S10 
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP-1} MAXIMUM={BED_TEMP+5}

        M{output} Collecting Probe...
        STATUS_HOMING
        {% if printer.toolhead.homed_axes != "xyz" %}
            M{output} Homing XY...
            G28 Y X ; home XY axis
        {% endif %}
       
        M{output} Homing Z...
        G28 Z ; home Z axis
        M{output} Calibrate Z
        STATUS_CALIBRATING_Z
        _Z_TILT_MAYBE ; adjust z-tilt
        M{output} Mesh print area
        #BED_MESH_PROFILE LOAD=default
        BED_MESH_CALIBRATE
        M{output} Preheating tool
        STATUS_HEATING
        M104 S{EXTRUDER_TEMP} ; set final nozzle temp

        G1 Z{25 + printcfg.clean_z} F240
        G1 X{printcfg.clean_x} Y{printcfg.clean_y} F3000 ; move to park position

        #M190 S{BED_TEMP} ; wait for bed temp to stabilize
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP-1} MAXIMUM={BED_TEMP+5}
        M109 S{EXTRUDER_TEMP} ; wait for nozzle temp to stabilize

        PRINT_START_TUNE ; audio feedback

        {% if WIPE == 1 %}
            STATUS_CLEANING
            WIPE_LINE ; Draw wipe line
        {% endif %}

        STATUS_CLEANING
        CLEAN_NOZZLE
        ADAPTIVE_PURGE

        M{output} Print Started
        STATUS_PRINTING

        M107 ; disable fan
        G21 ; set units to millimeters
        G90 ; use absolute coordinates
        M82 ; use absolute distances for extrusion
        G92 E0 ; reset extrusion distance

    {% else %}
        M{output} Sequence: {SEQUENCE_NUM} of {SEQUENTIAL}
        STATUS_HEATING
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET=150 ; allow partial nozzle warmup
        SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP-1} MAXIMUM={BED_TEMP+5}
        M109 S{EXTRUDER_TEMP} ; wait for nozzle temp to stabilize
        STATUS_PRINTING
        M{output} Part {SEQUENCE_NUM} Started
    {% endif %}

#####  START_PRINT Aliases  #####

[gcode_macro PREP_PRINT]
gcode:
    START_PRINT { rawparams }

[gcode_macro PRINT_START]
gcode:
    START_PRINT { rawparams }

################################
# Cleaning Nozzle - UNTESTED
################################

#[gcode_macro CLEAN_NOZZLE]
#variable_start_x: 285
#variable_start_y: 300
#variable_start_z: 5.5
#variable_wipe_dist: -50
#variable_wipe_qty: 10
#variable_wipe_spd: 200
#variable_raise_distance: 30

#gcode:
#  STATUS_CLEANING
# {% if "xyz" not in printer.toolhead.homed_axes %}
#   G28
# {% endif %}
 
# G90                                            ; absolute positioning
# ## Move nozzle to start position
# G1 X{start_x} Y{start_y} F6000
# G1 Z{start_z} F1500

 ## Wipe nozzle
# {% for wipes in range(1, (wipe_qty + 1)) %}
#   G1 X{start_x + wipe_dist} F{wipe_spd * 60}
#   G1 X{start_x} F{wipe_spd * 60}
# {% endfor %}

 ## Raise nozzle
# G1 Z{raise_distance}
#  STATUS_READY

################################
# Pause, Resume, Cancel
################################

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  STATUS_BUSY
  PAUSE_BASE
  _TOOLHEAD_PARK_PAUSE_CANCEL

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  STATUS_PRINTING
  ##### read extrude from  _TOOLHEAD_PARK_PAUSE_CANCEL  macro #####
  {% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
  STATUS_COOLING
  ## Move head and retract only if not already in the pause state and park set to true
  {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
    _TOOLHEAD_PARK_PAUSE_CANCEL
  {% endif %}
  TURN_OFF_HEATERS

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_park_delta = 2.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}
  CANCEL_PRINT_BASE

# Park top rear left
[gcode_macro PARKREAR]
gcode:
  STATUS_BUSY
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKREAR
    G90                              ; absolute positioning
    G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000     
    RESTORE_GCODE_STATE NAME=PARKREAR

###################################
# Filament Runout
##################################

[delayed_gcode DISABLEFILAMENTSENSOR] ; This will disable the SFS 1 second after klipper starts
initial_duration: 1
gcode:
    SET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=0 ; Put your filament sensor's name after SENSOR=

[gcode_macro SFS_ENABLE] ; Add this to PRINT_START
description: Enable smart filament sensor
gcode:
    M117 ENABLING the Smart Filament Sensor
    G92 E0
    SET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=1 ; Put your filament sensor's name after SENSOR=

[gcode_macro SFS_DISABLE] ; Add this to PRINT_END and PRINT_CANCEL
description: Disable smart filament sensor 
gcode:
    M117 DISABLING the Smart Filament Sensor
    G92 E0
    SET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=0 ; Put your filament sensor's name after SENSOR=