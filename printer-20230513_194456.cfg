# TO DO:
# 1.- Implement KAMP for Adaptive Meshing and Purging Via
#     https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging
# 2.- Finish setting up filament load/unload macros and runout settings
# 3.- add 2 more LED strips that are just white light A.K.A Daylight on a stick
# 4.- Look through LCD Display_menu.cfg for implementation into printer setup
# 5.- look through fan.cfg for implementation
# 6.- look at implementing heater_verify.cfg



# This file contains common pin mappings for the BigTreeTech Octopus
# and Octopus Pro boards. To use this config, start by identifying the
# micro-controller on the board - it may be an STM32F446, STM32F429,
# or an STM32H723.  Select the appropriate micro-controller in "make
# menuconfig" and select "Enable low-level configuration options". For
# STM32F446 boards the firmware should be compiled with a "32KiB
# bootloader" and a "12MHz crystal" clock reference. For STM32F429
# boards use a "32KiB bootloader" and an "8MHz crystal". For STM32H723
# boards use a "128KiB bootloader" and a "25Mhz crystal".

#####################################
# Include
#####################################

[include mainsail.cfg]
[include KAMP.cfg]
[include Homing.cfg] 
[include Maintenance_Macro.cfg]
[include Safety_Checks.cfg] 
[include LEDs.cfg] 
[include config_backup.cfg] # Includes Shell Commands
[include filament.cfg]
[include Print_Start_2_Test.cfg]
[include Printing_Macros.cfg]
#[include heatsoak.cfg]
#[include print_start.cfg]
#[include display_menu.cfg]
#[include fan.cfg]
#[include heater_verify.cfg]

######################################
# User Additions
######################################

[force_move]
enable_force_move: True

[static_digital_output disable_max31865]
pins: PF8

[multi_pin case_fans]
pins: PA8,PE5,PD12
#   A comma separated list of pins associated with this alias. This
#   parameter must be provided.

########################################
# Mainsail
########################################

[virtual_sdcard]
path: /home/pi/printer_data/gcodes

[display_status]

[pause_resume]

[exclude_object]

[save_variables]
filename: /home/pi/printer_data/config/.variables.stb

[respond]

########################################
# MCU's
########################################

[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32f446xx_2F0034001750344D30353320-if00
# CAN bus is also available on this board

[mcu sb2240]
canbus_uuid: 642c5b1be6c4

[mcu rpi]
serial: /tmp/klipper_host_mcu

########################################
# Temperature
########################################

[temperature_sensor SB2240]
sensor_type: temperature_mcu
sensor_mcu: sb2240
min_temp: 0
max_temp: 90

[temperature_sensor Chamber]
sensor_type: Generic 3950
sensor_pin: sb2240: PA3
min_temp: 0
max_temp:100
gcode_id: C

[temperature_sensor MCU]
sensor_type: temperature_mcu
min_temp: 0
max_temp: 60

[temperature_sensor PI4]
sensor_type: temperature_host

########################################
# Prihnter Type
########################################

[printer]
kinematics: corexy
max_velocity: 300
max_accel: 3600
max_z_velocity: 15
max_z_accel: 100

# See docs/Config_Reference.md for a description of parameters.

########################################
# Input Shaper
########################################

[input_shaper]
# X axis
shaper_freq_x: 55.4
shaper_type_x: mzv
# Y axis
shaper_freq_y: 34.8
shaper_type_y: mzv

########################################
# Filament Sensors and Future ERCF
########################################

#[filament_switch_sensor my_sensor] is located in filament.cfg
#pause_on_runout: True
#   When set to True, a PAUSE will execute immediately after a runout
#   is detected. Note that if pause_on_runout is False and the
#   runout_gcode is omitted then runout detection is disabled. Default
#   is True.
#runout_gcode:
#   A list of G-Code commands to execute after a filament runout is
#   detected. See docs/Command_Templates.md for G-Code format. If
#   pause_on_runout is set to True this G-Code will run after the
#   PAUSE is complete. The default is not to run any G-Code commands.
#insert_gcode:
#   A list of G-Code commands to execute after a filament insert is
#   detected. See docs/Command_Templates.md for G-Code format. The
#   default is not to run any G-Code commands, which disables insert
#   detection.
#event_delay: 3.0
#   The minimum amount of time in seconds to delay between events.
#   Events triggered during this time period will be silently
#   ignored. The default is 3 seconds.
#pause_delay: 0.5
#   The amount of time to delay, in seconds, between the pause command
#   dispatch and execution of the runout_gcode. It may be useful to
#   increase this delay if OctoPrint exhibits strange pause behavior.
#   Default is 0.5 seconds.
#switch_pin:
#   The pin on which the switch is connected. This parameter must be
#   provided.





########################################
# X and Y Steppers
########################################

# Driver0
[stepper_x]
step_pin: PF13
dir_pin: PF12
enable_pin: !PF14
microsteps: 16
rotation_distance: 40
full_steps_per_rotation: 400
# â€¦
endstop_pin: tmc5160_stepper_x:virtual_endstop
#endstop_pin: ^PG6
position_endstop: 365
position_min: 0
position_max: 365
homing_speed: 40
homing_retract_dist: 0
homing_positive_dir: True

# Driver1
[stepper_y]
step_pin: PG0
dir_pin: PG1
enable_pin: !PF15
microsteps: 16
rotation_distance: 40
full_steps_per_rotation: 400
# _
endstop_pin: tmc5160_stepper_y:virtual_endstop
#endstop_pin: ^PG9
position_endstop: 375
position_min: 0
position_max: 375
homing_speed: 40
homing_retract_dist: 0
homing_positive_dir: True


#########################################
# TMC5160
#########################################

# Driver0 Stepper A
[tmc5160 stepper_x]
cs_pin: PC4
spi_software_mosi_pin: PA7
spi_software_miso_pin: PA6
spi_software_sclk_pin: PA5
interpolate: True
diag1_pin: ^!PG6
driver_SGT: -0
run_current: 0.750
#hold_current: 0.2
sense_resistor: 0.075
stealthchop_threshold: 0

# Driver1 Stepper B
[tmc5160 stepper_y]
cs_pin: PD11
spi_software_mosi_pin: PA7
spi_software_miso_pin: PA6
spi_software_sclk_pin: PA5
interpolate: True
diag1_pin: ^!PG9
driver_SGT: -0 # -64 is most sensitive value, 63 is least sensitive
run_current: 0.750
#hold_current: 0.2
sense_resistor: 0.075
stealthchop_threshold: 0


########################################
#   Z Stepper Settings
########################################

## Z Stepper - Left Z Motor
## Z Stepper Driver 2
[stepper_z]
step_pin: PF11
dir_pin: !PG3
enable_pin: !PG5
microsteps: 16
# Rotation Distance for TR8x8 = 8, TR8x4 = 4, TR8x2 = 2
rotation_distance: 8            
full_steps_per_rotation: 200    #200 for 1.8 degree, 400 for 0.9 degree
# endstop_pin: PA0
endstop_pin: probe:z_virtual_endstop
##  Z-position of nozzle (in mm) to z-endstop trigger point relative to print surface (Z0)
##  (+) value = endstop above Z0, (-) value = endstop below
##  Increasing position_endstop brings nozzle closer to the bed
##  After you run Z_ENDSTOP_CALIBRATE, position_endstop will be stored at the very end of your config
# position_endstop: -0.2
position_max: 400
position_min: -5
homing_speed: 8.0 # Leadscrews are slower than 2.4, 10 is a recommended max.
second_homing_speed: 3.0
homing_retract_dist: 0

##  Z1 Stepper - Right Z Motor
##  Z1 Stepper Driver 3
[stepper_z1]
step_pin: PG4
dir_pin: !PC1
enable_pin: !PA0
## Remember to mirror these changes in stepper_z! (there are two motors)
rotation_distance: 8            
microsteps: 16
full_steps_per_rotation: 200    #200 for 1.8 degree, 400 for 0.9 degree

## Z2 Stepper - Rear Z Motor
## Z2 Stepper Driver 4
#[stepper_z2]
# step_pin: PF9
#dir_pin: PF10
#enable_pin: PG2
#rotation_distance: 8
#microsteps: 16
#full_steps_per_rotation: 200

########################################
# TMC2209 configuration
########################################

[tmc2209 stepper_z]
uart_pin: PC6
##diag_pin: PG10
run_current: 0.750
#stealthchop_threshold: 999999

[tmc2209 stepper_z1]
uart_pin: PC7
##diag_pin: PG11
run_current: 0.750
#stealthchop_threshold: 999999

#[tmc2209 stepper_z2]
#uart_pin: PF2
##diag_pin: PG12
#run_current: 0.750
#stealthchop_threshold: 999999

########################################
# Toolhead SB2240
########################################

# SB2240 PCB Toolhead
[extruder]
step_pin: sb2240: PD0
dir_pin: !sb2240: PD1
enable_pin: !sb2240: PD2
microsteps: 16
rotation_distance: 22.9823104
nozzle_diameter: 0.600
filament_diameter: 1.750
#stealthchop_threshold: 0
#driver_tpfd: 0
gear_ratio: 50:10
heater_pin:sb2240: PB13
sensor_type: MAX31865
sensor_pin:  sb2240: PA4
rtd_nominal_r: 100
rtd_reference_r: 430
rtd_num_of_wires: 2
spi_bus: spi1
min_extrude_temp: 10
min_temp: 10
max_temp: 350
max_extrude_only_distance: 100
control: pid
pid_kp: 29.248
pid_ki: 1.283
pid_kd: 166.718
## Try to keep pressure_advance below 1.0
pressure_advance: 0.028

################################
######### PID_EXTRUDER #########
################################

[gcode_macro PID_EXTRUDER]
description: PID Tune for the Extruder
gcode:
  STATUS_BUSY
  {% set e = printer.toolhead.extruder %}
  {% set T = params.TEMPERATURE|default(210)|float %}
  {% set S = params.FAN_IN_PERCENT|default(0)|float *2.55 %}
  {% set P = printer.configfile.config[e].pid_kp|float %}
  {% set I = printer.configfile.config[e].pid_ki|float %}
  {% set D = printer.configfile.config[e].pid_kd|float %}
  M106 S{S}
  PID_CALIBRATE HEATER={e} TARGET={T}
  TURN_OFF_HEATERS
  M109 R50
  SAVE_CONFIG


#########################################
# TMC2240 configuration
#########################################

[tmc2240 extruder]
cs_pin: sb2240: PA15
spi_software_sclk_pin: sb2240: PB10
spi_software_mosi_pin: sb2240: PB11
spi_software_miso_pin: sb2240: PB2
#driver_TPFD: 0
run_current: 0.650
#stealthchop_threshold: 999999

#########################################
# SB2240 Onboard ADXL
#########################################

#onboard ADXL on SB2240
#[adxl345]
#cs_pin: sb2240: PB12
#spi_software_sclk_pin: sb2240: PB10
#spi_software_mosi_pin: sb2240: PB11
#spi_software_miso_pin: sb2240: PB2
#axes_map: z,-y,x

#[resonance_tester]
#probe_points: 180, 180, 20
#accel_chip: adxl345

########################################
# Toolhead ADXL
########################################

########################################
# ADXL on Hot End
########################################

#external ADXL plugged directly into RPI
[adxl345]
cs_pin: rpi:None

[resonance_tester]
probe_points: 180, 180, 20
accel_chip: adxl345


########################################
# Probe
########################################

#Voron Tap
[probe]
pin: sb2240: PB5
x_Offset: 0
y_offset: 0
#z_offset: 2
speed: 3.0
samples: 3
samples_result: median
sample_retract_dist: 3.0
samples_tolerance: 0.01
samples_tolerance_retries: 4
activate_gcode:
    {% set PROBE_TEMP = 120 %}
    {% set MAX_TEMP = PROBE_TEMP + 5 %}
    {% set ACTUAL_TEMP = printer.extruder.temperature %}
    {% set TARGET_TEMP = printer.extruder.target %}

    {% if TARGET_TEMP > PROBE_TEMP %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
        M109 S{ PROBE_TEMP }
    {% else %}
        # Temperature target is already low enough, but nozzle may still be too hot.
        {% if ACTUAL_TEMP > MAX_TEMP %}
            { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
            TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
        {% endif %}
    {% endif %}
    

#########################################
# Bed Heater
#########################################

[heater_bed]
heater_pin: PA1
sensor_pin: PF3 # TB
sensor_type: ATC Semitec 104GT-2
control: watermark
min_temp: 0
max_temp: 130

#SSR 60hz 
#pwm_cycle_time: 0.0166

################################
############ PID_BED ###########
################################

[gcode_macro PID_BED]
description: PID Tune for the Bed
gcode:
  STATUS_BUSY
  {% set T = params.TEMPERATURE|default(60)|float %}
  {% set P = printer.configfile.config['heater_bed'].pid_kp|float %}
  {% set I = printer.configfile.config['heater_bed'].pid_ki|float %}
  {% set D = printer.configfile.config['heater_bed'].pid_kd|float %}
  M118 // PID parameters: pid_Kp={P} pid_Ki={I} pid_Kd={D}  (old)
  PID_CALIBRATE HEATER=heater_bed TARGET={T}
  TURN_OFF_HEATERS
  STATUS_READY


########################################
# Bed Heater Chamber Fans
########################################

##  Nevermore Micro filter
##  - note where this will be plugged into
#[fan_generic filter]
#pin: 
#max_power: 1.0
#kick_start_time: 0.5
#off_below: 0.10

########################################
# Bed Mesh
########################################

[bed_mesh]
speed: 100
horizontal_move_z: 10
mesh_min: 50, 50
mesh_max: 300,300
probe_count: 5,5
mesh_pps: 2,2
algorithm: bicubic
bicubic_tension: 0.2
move_check_distance: 5
split_delta_z: .025
fade_start: 1
fade_end: 10
fade_target: 0  

# SEE KAMP.cfg
#[gcode_macro BED_MESH_CALIBRATE]
#rename_existing: BASE_BED_MESH_CALIBRATE
#gcode:
    #before the original gcode
#    BED_MESH_CLEAR
#    _Z_TILT_MAYBE
#    G1 X175 Y175 Z5 F6000
    #the original gcode
#    BASE_BED_MESH_CALIBRATE
    #after the original gcode


########################################
# Bed Leveling Routine
########################################
[idle_timeout]
timeout: 1800

#[safe_z_home]
## XY Location of the Z Endstop Switch
#home_xy_position: 185, 185
#speed: 100
#z_hop: 10

[bed_screws]
screw1: 33,292.2
screw1_name: rear_left_screw
screw2: 333,292.2
screw2_name: rear_right_screw
screw3: 333,30.2
screw3_name: front_right_screw
screw4: 33,30.2
screw4_name: front_left_screw
horizontal_move_z: 5
speed: 200

[z_tilt]
##  Use Z_TILT_ADJUST to level the bed left to right.
##  z_positions: Location of toolhead
  
z_positions:
    -32, 175
    386, 175
points:
    33, 175
    333, 175

speed: 200
horizontal_move_z: 5
retries: 5
retry_tolerance: 0.0075


########################################
# MCU Fans
########################################

#Fans only run while steppers are active.
[controller_fan MCU_Cooling]
pin=multi_pin:case_fans
max_power: 0.90
off_below: 0.10
kick_start_time: 0.5
stepper: stepper_x, stepper_y


########################################
# Toolhead Fans
########################################

#Runs when hot end turns on
[heater_fan hotend_fan]
pin: sb2240: PB14
heater: extruder
tachometer_pin: ^sb2240: PB15
max_power: 1.0
heater_temp: 50.0
tachometer_ppr: 2
tachometer_poll_interval: 0.0015

#Part cooling fan
[fan]
pin: sb2240: PA0
#max power: 1.0
kick_start_time: 0.5
off_below: 0.10

#Runs when hot end turns on
[heater_fan SB2240_fan]
pin: sb2240: PA1
heater_temp: 50
max_power: 1.0

########################################
# EXP 1 / EXP 2 (display) pins
########################################

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PE8,   EXP1_2=PE7,
    EXP1_3=PE9,   EXP1_4=PE10,
    EXP1_5=PE12,  EXP1_6=PE13,   
    EXP1_7=PE14,  EXP1_8=PE15,
    EXP1_9=<GND>, EXP1_10=<5V>,

    # EXP2
    EXP2_1=PA6,   EXP2_2=PA5,
    EXP2_3=PB1,   EXP2_4=PA4,
    EXP2_5=PB2,   EXP2_6=PA7,    
    EXP2_7=PC15,  EXP2_8=<RST>,
    EXP2_9=<GND>, EXP2_10=<5V>,


########################################
#   Displays
########################################

[display]
##  mini12864 LCD Display
lcd_type: uc1701
cs_pin: PE9
a0_pin: PE10
rst_pin: PE12
encoder_pins: ^PB1, ^PB2
click_pin: ^!PE7
contrast: 63
spi_software_miso_pin: PA6
spi_software_mosi_pin: PA7
spi_software_sclk_pin: PA5


[output_pin beeper]

#pin: EXP1_1
pin: PE8

[neopixel _fysetc_mini12864]
##  To control Neopixel RGB in mini12864 display
pin: PE13
#pin: EXP1_6
chain_count: 3
initial_RED: 0.4
initial_GREEN: 0.4
initial_BLUE: 0.4
color_order: RGB

##  Set RGB values on boot up for each Neopixel. 
##  Index 1 = display, Index 2 and 3 = Knob
[delayed_gcode setdisplayneopixel]
initial_duration: 1
gcode:
       SET_LED LED=_fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0
       SET_LED LED=_fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
       SET_LED LED=_fysetc_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 



########################################
# Macros
########################################
# The following status macros are available (these go inside of your macros):
#
#    STATUS_READY
#    STATUS_OFF
#    STATUS_BUSY
#    STATUS_HEATING
#    STATUS_LEVELING
#    STATUS_HOMING
#    STATUS_CLEANING
#    STATUS_MESHING
#    STATUS_CALIBRATING_Z
#    STATUS_COOLING
#    STATUS_PRINTING
#    STATUS_PART_READY
#    STATUS_COOLING

# With additional macros for basic control:
#
#    SET_NOZZLE_LEDS_ON
#    SET_LOGO_LEDS_OFF
#    SET_NOZZLE_LEDS_OFF



#####################################################################
#   BTT Octopus Pin Aliases
#####################################################################

[board_pins]
aliases:
    # Stepper drivers
    MOT0_EN=PF14, MOT0_STEP=PF13, MOT0_DIR=PF12, MOT0_CS=PC4,   # MOTOR0
    MOT1_EN=PF15, MOT1_STEP=PG0,  MOT1_DIR=PG1,  MOT1_CS=PD11,  # MOTOR1
    MOT2_EN=PG5,  MOT2_STEP=PF11, MOT2_DIR=PG3,  MOT2_CS=PC6,   # MOTOR2
    MOT3_EN=PA0,  MOT3_STEP=PG4,  MOT3_DIR=PC1,  MOT3_CS=PC7,   # MOTOR3
    MOT4_EN=PG2,  MOT4_STEP=PF9,  MOT4_DIR=PF10, MOT4_CS=PF2,   # MOTOR4
    MOT5_EN=PF1,  MOT5_STEP=PC13, MOT5_DIR=PF0,  MOT5_CS=PE4,   # MOTOR5
    MOT6_EN=PD4,  MOT6_STEP=PE2,  MOT6_DIR=PE3,  MOT6_CS=PE1,   # MOTOR6
    MOT7_EN=PE0,  MOT7_STEP=PE6,  MOT7_DIR=PA14, MOT7_CS=PD3,   # MOTOR7

    # Heaters
    BED_OUT=PA1,
    HE0=PA2, HE1=PA3, HE2=PB10, HE3=PB11,

    # Thermisors
    TB=PF3, T0=PF4, T1=PF5, T2=PF6, T3=PF7,
    PT100=PF8,

    # Fans
    FAN0=PA8, FAN1=PE5, FAN2=PD12, FAN3=PD13, FAN4=PD14, FAN5=PD15,

    # End stops
    # X= ESTOP0=PG6 Y=ESTOP1=PG9 Voron Tap=PG15 HOT END FAN TACH=PG14
    ESTOP0=PG6,  ESTOP1=PG9,  ESTOP2=PG10, ESTOP3=PG11,
    ESTOP4=PG12, ESTOP5=PG13, ESTOP6=PG14, ESTOP7=PG15,

   

    # TFT
    TFT_5=<RST>,
    TFT_4=PA10,
    TFT_3=PA9,
    TFT_2=<GND>,
    TFT_1=<5V>,

    # Inductive Probe
    PRB_1=<DCV>, PRB_2=<GND>, PRB_3=PB7,

    # BL Touch
    BLT_5=<GND>,
    BLT_4=<5V>,
    BLT_CTL=PB6,   # BL Touch servo pin
    BLT_2=<GND>,
    BLT_SNSR=PB7,  # BL Touch end stop pin

    # LED Control
    NEOPXL_3=<GND>, NEOPXL_2=PB0, NEOPXL_1=<5V>,

    # Raspberry Pi
    RPI_1=<5V>,  RPI_2=<5V>,
    RPI_3=<GND>, RPI_4=<GND>,
    RPI_5=<GND>, RPI_6=<GND>,
    RPI_7=<GND>, RPI_8=<GND>,
    RPI_RX=PD6,  RPI_TX=PD5,

    # SPI3
    SPI3_2=<3V3>, SPI3_MOSI=PB5, SPI3_CS=PA15, SPI3_8=<GND>, SPI3_10=<5V>,
    SPI3_1=<GND>, SPI3_MISO=PB4, SPI3_SCK=PB3, SPI3_7=<GND>, SPI3_9=<5V>,

    # Other headers
    POWER_DET=PC0,
    PS_ON=PE11

############################################
# User Variables
############################################


[gcode_macro _USER_VARIABLE]
description: Helper: Contains User defined printer variables
##### see the readme for the variable definition #####
variable_hw: {}
variable_homing: {}
variable_z_hop: 10
variable_speed: {}   
variable_probe: {}
variable_park: {}
variable_filament: {}
variable_purge: {}
variable_print_start: {}
variable_unload_sd: False
variable_prime: {}
variable_respond: {}
variable_peripheral: {}
variable_run: False
gcode:
  ###################################################################
  ##                     start of user defines                     ## 
  ## this needs to be changed for your printer                     ##
  ###################################################################
  #{% set user_z_endstop_xy = [232.0,355.0] %}  ; z Endstop position insight right profil
  #{% set user_z_endstop_xy = [123.0,355.0] %}  ; z Endstop position insight left profil
  {% set user_z_endstop_hop = 7.5 %}           ; z hop for moves e.g homimg
  {% set user_z_home_current = 0.3 %}          ; reduced homing curent for z
  {% set user_home_accel = 1200 %}             ; reduced ACCEL for homing
  #{% set user_bed_y_offset = 5 %}              ; Endstop offset to bed max y
  ##### all user defined speeds [mm/sec] #####
  {% set user_z_hop_speed = 15 %}              ; default z_hop speed
  {% set user_retract_speed = 40 %}            ; default retract/extrude speed
  {% set user_travel_speed = 350 %}            ; travel speed e.g park, dock ...
  #{% set user_probe_dock_speed = 50 %}         ; dock speed for attach/dock
  {% set user_filament_load_speed = 50 %}      ; load/unload speed
  {% set user_wipe_speed = 60 %}               ; wipe move speed 
  {% set user_prime_speed = 25 %}              ; prime line speed  
  ##### Mag Probe #####
  #{% set user_probe_dock_pos = [0,355] %}      ; position of the dock 
  #{% set user_probe_delta_x = 30 %}            ; x offset for position before dock
  #{% set user_probe_delta_y = -30 %}           ; y offset to move probe out of dock
  #{% set user_z_probe_hop = 15.5 %}            ; z minimum heigh to avoid crash
  ##### Park Position #####
  {% set user_park_xy_delta = 25 %}            ; distance for x or y from the edge
  {% set user_park_z_max_delta = 40 %}         ; insure to do not hit cam in front
  {% set user_park_z_min = 30 %}               ; minimal z from bed
  {% set user_park_pause_z_delta = 2.0 %}      ; distance to increase head while PAUSE/CANCEL_PRINT
  {% set user_park_at_cancel = False %}        ; park head at CANCEL_PRINT if not paused [False/True]
  ##### Filament #####
  {% set user_extruder_min_add = 30 %}         ; Temperature add to min Extruder temp
  {% set user_load_distance = 90 %}            ; load distance while load filament
  {% set user_load_extrude = 50 %}             ; extrude distance while load filament
  {% set user_unload_distance = 95 %}          ; unload distance while unload filament
  {% set user_retract_end = 2 %}               ; retract distance at PRINT_END or CANCEL_PRINT
  {% set user_retract_pause = 1 %}             ; retract/extrude distance while PAUSE or RESUME
  ##### Purge & Brush #####
  #{% set user_brush_pos = 'right' %}           ; left/right profile used
  #{% set user_brush_x_middle = 100 %}         ; mid point of brush at left profile
  #{% set user_brush_x_middle = 250 %}          ; mid point of brush at right profil
  #{% set user_brush_x_width = 40 %}            ; width of brush
  #{% set user_brush_y_start = 351 %}           ; start point at y
  #{% set user_wipe_z = 1.0 %}                  ; z for wipe moves
  #{% set user_wipe_cnt = 5 %}                  ; number of full wipes
  #{% set user_z_purge = 2.5 %}                 ; z above purge bucket
  ##### PRINT_START/STOP #####
  {% set user_print_start_bed_up = 10 %}       ; bed temp raise for faster heat soak
  {% set user_print_start_ival = 1 %}          ; wait time per call in sec
  {% set user_print_start_extruder_time = 3 %} ; time in minutes before soak end to start extruder heating 
  {% set user_print_start_bed_time = 3 %}      ; time in minutes before soak end to set bed target temp
  {% set user_print_start_prime_mult = 2 %}    ; multiplier for prime line hight 
  {% set user_unload_sd = True %}              ; unload sd file at PRINT_END or CANCEL_PRINT [True,False]
  ##### Prime Line #####
  #{% set user_prime_start_xy = [5.0,30.0] %}   ; x&y start coordinates of prime line
  #{% set user_prime_z = 0.34 %}                ; default prime layer hight
  #{% set user_prime_dir = 'Y+' %}              ; direction of prime line (X+, X-, Y+, Y-)
  #{% set user_prime_spacing = 0.4 %}           ; distance between line, move will allways positive
  #{% set user_prime_lenght = 220 %}            ; length of prime line
  #{% set user_prime_seg = 11 %}                ; segments in that the prime line is splitted
  #{% set user_prime_extrude_per_seg = 2 %}     ; amount of filament extruded per segment
  ##### Respond defaults #####
  # Default behaivior for output messages of the macro 0: no output 1: console output
  {% set user_respond_set_z_current = 0 %}     ; Macro: _SET_Z_CURRENT
  {% set user_respond_set_acc = 0 %}           ; Macro: _SET_ACC
  {% set user_respond_probe_action = 1 %}      ; Macro: _PROBE_ACTION
  {% set user_respond_layer = 0 %}             ; Macro: _LAYER
  ##### Peripheral #####
  #{% set user_filter_on = 0.5 %}               ; filter on value
  #{% set user_filter_use_time = 80 %}          ; Nevermore change warning limit 
  #{% set user_vent_on = 15 %}                  ; chamber fan on temperature                        
  #{% set user_caselight_on = 0.4 %}            ; caselight on value
  #{% set user_fan_run_after_print = 30 %}      ; time in min to run filter and chamber exhaust after print finsih 
  ###################################################################
  ##                      end of user defines                      ## 
  ###################################################################
  # get printer limits & cfg value
  {% set min = printer.toolhead.axis_minimum %}
  {% set max = printer.toolhead.axis_maximum %}
  {% set cfg_endstop_z_offset = printer.configfile.settings.stepper_z.position_endstop|default(0.0)|float %}
  # detect additional hardware
  {% set hw_dic = {'display'       : {'ena' : True if 'neopixel neo_display' in printer.configfile.settings 
                                         else False},
                   'chamber'       : {'type': 'sensor' if 'temperature_sensor chamber' in printer.configfile.settings
                                         else 'fan'    if 'temperature_fan chamber' in printer.configfile.settings 
                                         else 'none'},
                   'caselight'     : {'ena' : True if 'output_pin caselight' in printer.configfile.settings 
                                         else False},
                   'filter'        : {'ena' : True if 'fan_generic filter' in printer.configfile.settings 
                                         else False},
                   'runout'        : {'type': 'switch' if 'filament_switch_sensor runout' in printer.configfile.settings
                                         else 'motion' if 'filament_motion_sensor runout' in printer.configfile.settings
                                         else 'file'   if 'save_variables' in printer and filament_loaded in printer.save_variables.variables 
                                         else 'none'},
                   'relay'         : {'ena' : True if 'output_pin extruder_relay'   in printer.configfile.settings and
                                                      'output_pin heater_bed_relay' in printer.configfile.settings 
                                         else False},
                   'auto_z_offset' : {'type': 'z_calib+flexplate' if 'z_calibration' in printer and 'save_variables' in printer and 'plates' in printer.save_variables.variables
                                         else 'z_calib'           if 'z_calibration' in printer
                                         else 'flexplate'         if 'save_variables' in printer and 'plates' in printer.save_variables.variables 
                                         else 'none'},
                   'mag_probe'     : {'ena' : True if printer['gcode_macro _MAG_PROBE'] is defined or 'dockable_probe' in printer 
                                         else False},
                   'endstop_temp'  : {'ena' : True if 'temperature_sensor endstop' in printer.configfile.settings 
                                         else False}}%}
  {% set _dummy = hw_dic.chamber.update({'ena': True if hw_dic.chamber.type != 'none' else False}) %}
  {% set _dummy = hw_dic.chamber.update({'fan': True if hw_dic.chamber.type == 'fan' else False}) %}
  {% set _dummy = hw_dic.runout.update({'ena': True if hw_dic.runout.type != 'none' else False}) %}
  {% set _dummy = hw_dic.runout.update({'sensor': True if hw_dic.runout.type == 'switch' or hw_dic.runout.type == 'motion'
                                             else False}) %}
  {% set _dummy = hw_dic.auto_z_offset.update({'ena': True if hw_dic.auto_z_offset.type != 'none' else False}) %}
  {% set _dummy = hw_dic.auto_z_offset.update({'auto': True if hw_dic.auto_z_offset.type == 'z_calib+flexplate' or
                                                               hw_dic.auto_z_offset.type == 'z_calib'
                                                  else False}) %}
  {% set _dummy = hw_dic.auto_z_offset.update({'manu': True if hw_dic.auto_z_offset.type == 'z_calib+flexplate' or
                                                               hw_dic.auto_z_offset.type == 'flexplate'
                                                  else False}) %}
  # calc needed values
  {% set bed = {'min': {'x': min.x, 'y': min.y                    , 'z': 0    },
                'max': {'x': max.x, 'y': max.y - user_bed_y_offset, 'z': max.z}} %}
  {% set calc_center = {'x': (bed.max.x - bed.min.x) / 2,
                        'y': (bed.max.y - bed.min.y) / 2, 
                        'z': (bed.max.z - bed.min.z) / 2} %}
  {% set calc_park = {'min': {'x': bed.min.x + user_park_xy_delta,
                              'y': bed.min.y + user_park_xy_delta,
                              'z': bed.min.z + user_park_z_min},
                      'max': {'x': bed.max.x - user_park_xy_delta,
                              'y': bed.max.y - user_park_xy_delta,
                              'z': bed.max.z - user_park_z_max_delta}} %}
  {% set calc_z_endstop_z = cfg_endstop_z_offset|round(0, 'ceil') + 1.0 if cfg_endstop_z_offset > 0 else 1.0 %}
  {% set calc_z_hop = user_z_probe_hop if hw_dic.mag_probe.ena and user_z_probe_hop > user_z_endstop_hop
                 else user_z_endstop_hop %}
  {% set calc_brush = {'start': user_brush_x_middle - user_brush_x_width / 2,
                       'end'  : user_brush_x_middle + user_brush_x_width / 2} %}
  {% set calc_purge = {'x': (min.x + calc_brush.start) / 2 if user_brush_pos|lower == 'left'
                       else max.x - (max.x - calc_brush.end) / 2,
                       'y': max.y} %}
  {% set calc_wipe = {'start': {'x': calc_brush.start if user_brush_pos|lower == 'left'
                                else calc_brush.end,
                                'y': user_brush_y_start},
                      'end'  : {'x': calc_brush.end if user_brush_pos|lower == 'left'
                                else calc_brush.start,
                                'y': max.y}} %}
  # prepare dictonaries
  {% set homing_dic = {'z_endstop': {'x':user_z_endstop_xy[0], 'y':user_z_endstop_xy[1], 'z':calc_z_endstop_z, 'hop':user_z_endstop_hop},
                       'z_current': user_z_home_current,
                       'accel'    : user_home_accel} %}
  {% set purge_dic = {'purge' : {'x':calc_purge.x, 'y':calc_purge.y, 'z':user_z_purge},
                      'wipe'  : {'start'  : {'x': calc_wipe.start.x, 'y': calc_wipe.start.y, 'z':user_wipe_z},
                                 'end'    : {'x': calc_wipe.end.x,   'y': calc_wipe.end.y,   'z':user_wipe_z},
                                 'offset' : (calc_wipe.end.y - calc_wipe.start.y) / user_wipe_cnt,
                                 'cnt'    : user_wipe_cnt}} %}
  {% set probe_dic = {'dock'        : {'x'    : user_probe_dock_pos[0], 
                                       'y'    : user_probe_dock_pos[1] + user_probe_delta_y},
                      'store'       : {'x'    : user_probe_dock_pos[0] + user_probe_delta_x, 
                                       'y'    : user_probe_dock_pos[1]}} %}
  {% set speed_dic = {'z_hop'   : (user_z_hop_speed * 60),
                      'retract' : (user_retract_speed * 60),
                      'travel'  : (user_travel_speed * 60), 
                      'dock'    : (user_probe_dock_speed * 60),
                      'load'    : (user_filament_load_speed * 60),
                      'wipe'    : (user_wipe_speed * 60),
                      'prime'   : (user_prime_speed * 60)} %}
  {% set park_dic = {'bed'           : {'x': calc_center.x,   'y': calc_center.y,   'z': calc_park.min.z},
                     'center'        : {'x': calc_center.x,   'y': calc_center.y,   'z': calc_center.z},
                     'front'         : {'x': calc_center.x,   'y': calc_park.min.y, 'z': calc_park.max.z},
                     'frontlow'      : {'x': calc_center.x,   'y': calc_park.min.y, 'z': calc_park.min.z},
                     'rear'          : {'x': calc_park.min.x, 'y': calc_park.max.y, 'z': calc_park.max.z},
                     'pause'         : {'x': calc_purge.x,    'y': calc_purge.y,   'dz': user_park_pause_z_delta},
                     'park_at_cancel': user_park_at_cancel} %}
  {% set filament_dic = {'load_distance'   : user_load_distance,
                         'load_extrude'    : user_load_extrude,
                         'unload_distance' : user_unload_distance,
                         'retract'         : {'end'   : user_retract_end,
                                              'pause' : user_retract_pause,
                                              'cancel': user_retract_end - user_retract_pause}} %}
  {% set prime_dic = {'pos'             : {'x':user_prime_start_xy[0], 'y':user_prime_start_xy[1], 'z':user_prime_z},
                      'dir'             : user_prime_dir,
                      'spacing'         : user_prime_spacing,
                      'length_per_seg'  : user_prime_lenght / user_prime_seg,
                      'seg'             : user_prime_seg,
                      'extrude_per_seg' : user_prime_extrude_per_seg} %}
  {% set print_start_dic = {'bed_up'     : user_print_start_bed_up|float|round(1),
                            'ival'       : user_print_start_ival|int,
                            'time'       : {'extruder' : (user_print_start_extruder_time * 60)|int,
                                            'bed'      : (user_print_start_bed_time * 60)|int},
                            'prime_mult' : user_print_start_prime_mult|float} %}
  {% set respond_dic = {'z_current'    : user_respond_set_z_current, 
                        'acc'          : user_respond_set_acc, 
                        'probe_action' : user_respond_probe_action, 
                        'layer'        : user_respond_layer} %}
  {% set peripheral_dic =  {'filter'     : {'on_val'          : user_filter_on,
                                            'warning'         : user_filter_use_time,
                                            'run_after_print' : (user_fan_run_after_print * 60)},
                            'vent'      : {'on_val'          : user_vent_on,
                                           'run_after_print' : ((user_fan_run_after_print * 60) + 5)},
                            'caselight' : {'on_val' : user_caselight_on}} %}
  # store results in variable
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=hw VALUE="{hw_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=homing VALUE="{homing_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=z_hop VALUE={calc_z_hop}
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=speed VALUE="{speed_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=probe VALUE="{probe_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=park VALUE="{park_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=filament VALUE="{filament_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=purge VALUE="{purge_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=print_start VALUE="{print_start_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=unload_sd VALUE={user_unload_sd}
  #SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=prime VALUE="{prime_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=respond VALUE="{respond_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=peripheral VALUE="{peripheral_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=run VALUE=True

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [probe]
#*# z_offset = -2.800
#*#
#*# [extruder]
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	0.040000, -0.002500, -0.017500
#*# 	-0.037500, -0.037500, -0.035000
#*# 	-0.087500, -0.102500, -0.102500
#*# x_count = 3
#*# y_count = 3
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = lagrange
#*# tension = 0.2
#*# min_x = 165.23
#*# max_x = 194.77
#*# min_y = 165.23
#*# max_y = 194.77
